/**
 * generated by Xtext 2.22.0
 */
package fr.gwendal_jouneaux.rob_lang.robLANG.impl;

import fr.gwendal_jouneaux.rob_lang.robLANG.AdaptationProperty;
import fr.gwendal_jouneaux.rob_lang.robLANG.AnnotatedStatement;
import fr.gwendal_jouneaux.rob_lang.robLANG.Expression;
import fr.gwendal_jouneaux.rob_lang.robLANG.RobLANGPackage;
import fr.gwendal_jouneaux.rob_lang.robLANG.SimpleStatement;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Annotated Statement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link fr.gwendal_jouneaux.rob_lang.robLANG.impl.AnnotatedStatementImpl#getProperty <em>Property</em>}</li>
 *   <li>{@link fr.gwendal_jouneaux.rob_lang.robLANG.impl.AnnotatedStatementImpl#getLowerBound <em>Lower Bound</em>}</li>
 *   <li>{@link fr.gwendal_jouneaux.rob_lang.robLANG.impl.AnnotatedStatementImpl#getHigherBound <em>Higher Bound</em>}</li>
 *   <li>{@link fr.gwendal_jouneaux.rob_lang.robLANG.impl.AnnotatedStatementImpl#getStatement <em>Statement</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AnnotatedStatementImpl extends StatementImpl implements AnnotatedStatement
{
  /**
   * The default value of the '{@link #getProperty() <em>Property</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProperty()
   * @generated
   * @ordered
   */
  protected static final AdaptationProperty PROPERTY_EDEFAULT = AdaptationProperty.TIME;

  /**
   * The cached value of the '{@link #getProperty() <em>Property</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProperty()
   * @generated
   * @ordered
   */
  protected AdaptationProperty property = PROPERTY_EDEFAULT;

  /**
   * The cached value of the '{@link #getLowerBound() <em>Lower Bound</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLowerBound()
   * @generated
   * @ordered
   */
  protected Expression lowerBound;

  /**
   * The cached value of the '{@link #getHigherBound() <em>Higher Bound</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getHigherBound()
   * @generated
   * @ordered
   */
  protected Expression higherBound;

  /**
   * The cached value of the '{@link #getStatement() <em>Statement</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStatement()
   * @generated
   * @ordered
   */
  protected SimpleStatement statement;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AnnotatedStatementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RobLANGPackage.Literals.ANNOTATED_STATEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AdaptationProperty getProperty()
  {
    return property;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setProperty(AdaptationProperty newProperty)
  {
    AdaptationProperty oldProperty = property;
    property = newProperty == null ? PROPERTY_EDEFAULT : newProperty;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RobLANGPackage.ANNOTATED_STATEMENT__PROPERTY, oldProperty, property));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getLowerBound()
  {
    return lowerBound;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLowerBound(Expression newLowerBound, NotificationChain msgs)
  {
    Expression oldLowerBound = lowerBound;
    lowerBound = newLowerBound;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RobLANGPackage.ANNOTATED_STATEMENT__LOWER_BOUND, oldLowerBound, newLowerBound);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLowerBound(Expression newLowerBound)
  {
    if (newLowerBound != lowerBound)
    {
      NotificationChain msgs = null;
      if (lowerBound != null)
        msgs = ((InternalEObject)lowerBound).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RobLANGPackage.ANNOTATED_STATEMENT__LOWER_BOUND, null, msgs);
      if (newLowerBound != null)
        msgs = ((InternalEObject)newLowerBound).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RobLANGPackage.ANNOTATED_STATEMENT__LOWER_BOUND, null, msgs);
      msgs = basicSetLowerBound(newLowerBound, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RobLANGPackage.ANNOTATED_STATEMENT__LOWER_BOUND, newLowerBound, newLowerBound));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getHigherBound()
  {
    return higherBound;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetHigherBound(Expression newHigherBound, NotificationChain msgs)
  {
    Expression oldHigherBound = higherBound;
    higherBound = newHigherBound;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RobLANGPackage.ANNOTATED_STATEMENT__HIGHER_BOUND, oldHigherBound, newHigherBound);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setHigherBound(Expression newHigherBound)
  {
    if (newHigherBound != higherBound)
    {
      NotificationChain msgs = null;
      if (higherBound != null)
        msgs = ((InternalEObject)higherBound).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RobLANGPackage.ANNOTATED_STATEMENT__HIGHER_BOUND, null, msgs);
      if (newHigherBound != null)
        msgs = ((InternalEObject)newHigherBound).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RobLANGPackage.ANNOTATED_STATEMENT__HIGHER_BOUND, null, msgs);
      msgs = basicSetHigherBound(newHigherBound, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RobLANGPackage.ANNOTATED_STATEMENT__HIGHER_BOUND, newHigherBound, newHigherBound));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SimpleStatement getStatement()
  {
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStatement(SimpleStatement newStatement, NotificationChain msgs)
  {
    SimpleStatement oldStatement = statement;
    statement = newStatement;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RobLANGPackage.ANNOTATED_STATEMENT__STATEMENT, oldStatement, newStatement);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setStatement(SimpleStatement newStatement)
  {
    if (newStatement != statement)
    {
      NotificationChain msgs = null;
      if (statement != null)
        msgs = ((InternalEObject)statement).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RobLANGPackage.ANNOTATED_STATEMENT__STATEMENT, null, msgs);
      if (newStatement != null)
        msgs = ((InternalEObject)newStatement).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RobLANGPackage.ANNOTATED_STATEMENT__STATEMENT, null, msgs);
      msgs = basicSetStatement(newStatement, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RobLANGPackage.ANNOTATED_STATEMENT__STATEMENT, newStatement, newStatement));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case RobLANGPackage.ANNOTATED_STATEMENT__LOWER_BOUND:
        return basicSetLowerBound(null, msgs);
      case RobLANGPackage.ANNOTATED_STATEMENT__HIGHER_BOUND:
        return basicSetHigherBound(null, msgs);
      case RobLANGPackage.ANNOTATED_STATEMENT__STATEMENT:
        return basicSetStatement(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RobLANGPackage.ANNOTATED_STATEMENT__PROPERTY:
        return getProperty();
      case RobLANGPackage.ANNOTATED_STATEMENT__LOWER_BOUND:
        return getLowerBound();
      case RobLANGPackage.ANNOTATED_STATEMENT__HIGHER_BOUND:
        return getHigherBound();
      case RobLANGPackage.ANNOTATED_STATEMENT__STATEMENT:
        return getStatement();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RobLANGPackage.ANNOTATED_STATEMENT__PROPERTY:
        setProperty((AdaptationProperty)newValue);
        return;
      case RobLANGPackage.ANNOTATED_STATEMENT__LOWER_BOUND:
        setLowerBound((Expression)newValue);
        return;
      case RobLANGPackage.ANNOTATED_STATEMENT__HIGHER_BOUND:
        setHigherBound((Expression)newValue);
        return;
      case RobLANGPackage.ANNOTATED_STATEMENT__STATEMENT:
        setStatement((SimpleStatement)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RobLANGPackage.ANNOTATED_STATEMENT__PROPERTY:
        setProperty(PROPERTY_EDEFAULT);
        return;
      case RobLANGPackage.ANNOTATED_STATEMENT__LOWER_BOUND:
        setLowerBound((Expression)null);
        return;
      case RobLANGPackage.ANNOTATED_STATEMENT__HIGHER_BOUND:
        setHigherBound((Expression)null);
        return;
      case RobLANGPackage.ANNOTATED_STATEMENT__STATEMENT:
        setStatement((SimpleStatement)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RobLANGPackage.ANNOTATED_STATEMENT__PROPERTY:
        return property != PROPERTY_EDEFAULT;
      case RobLANGPackage.ANNOTATED_STATEMENT__LOWER_BOUND:
        return lowerBound != null;
      case RobLANGPackage.ANNOTATED_STATEMENT__HIGHER_BOUND:
        return higherBound != null;
      case RobLANGPackage.ANNOTATED_STATEMENT__STATEMENT:
        return statement != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (property: ");
    result.append(property);
    result.append(')');
    return result.toString();
  }

} //AnnotatedStatementImpl
