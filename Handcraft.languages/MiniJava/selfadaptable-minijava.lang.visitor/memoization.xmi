<?xml version="1.0" encoding="ASCII"?>
<xmi:XMI xmi:version="20131001"
    xmlns:xmi="http://www.omg.org/spec/XMI/20131001"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:miniJava="http://www.example.org/minijava/MiniJava"
    xsi:schemaLocation="http://www.example.org/minijava/MiniJava model/MiniJava.ecore">
  <classes xsi:type="miniJava:Clazz"
      name="Fib">
    <members
        xsi:type="miniJava:Method"
        name="main"
        access="public"
        isstatic="true">
      <typeRef
          xsi:type="miniJava:VoidTypeRef"/>
      <params
          name="args">
        <typeRef
            xsi:type="miniJava:ArrayTypeRef">
          <typeRef
              xsi:type="miniJava:StringTypeRef"/>
        </typeRef>
      </params>
      <body>
        <statements
            xsi:type="miniJava:Assignment">
          <assignee
              xsi:type="miniJava:VariableDeclaration"
              name="n">
            <typeRef
                xsi:type="miniJava:IntegerTypeRef"/>
          </assignee>
          <value
              xsi:type="miniJava:IntConstant"
              value="30"/>
        </statements>
        <statements
            xsi:type="miniJava:PrintStatement">
          <expression
              xsi:type="miniJava:MethodCall"
              method="//@classes.0/@members.1">
            <receiver
                xsi:type="miniJava:NewObject"
                type="//@classes.0"/>
            <args
                xsi:type="miniJava:SymbolRef"
                symbol="//@classes.0/@members.0/@body/@statements.0/@assignee"/>
          </expression>
        </statements>
      </body>
    </members>
    <members
        xsi:type="miniJava:Method"
        name="fib">
      <typeRef
          xsi:type="miniJava:IntegerTypeRef"/>
      <params
          name="n">
        <typeRef
            xsi:type="miniJava:IntegerTypeRef"/>
      </params>
      <body>
        <statements
            xsi:type="miniJava:PrintStatement">
          <expression
              xsi:type="miniJava:Plus">
            <left
                xsi:type="miniJava:StringConstant"
                value="compute fib("/>
            <right
                xsi:type="miniJava:Plus">
              <left
                  xsi:type="miniJava:SymbolRef"
                  symbol="//@classes.0/@members.1/@params.0"/>
              <right
                  xsi:type="miniJava:StringConstant"
                  value=")"/>
            </right>
          </expression>
        </statements>
        <statements
            xsi:type="miniJava:Assignment">
          <assignee
              xsi:type="miniJava:VariableDeclaration"
              name="ret">
            <typeRef
                xsi:type="miniJava:IntegerTypeRef"/>
          </assignee>
          <value
              xsi:type="miniJava:IntConstant"
              value="1"/>
        </statements>
        <statements
            xsi:type="miniJava:IfStatement">
          <expression
              xsi:type="miniJava:Superior">
            <left
                xsi:type="miniJava:SymbolRef"
                symbol="//@classes.0/@members.1/@params.0"/>
            <right
                xsi:type="miniJava:IntConstant"
                value="2"/>
          </expression>
          <thenBlock>
            <statements
                xsi:type="miniJava:Assignment">
              <assignee
                  xsi:type="miniJava:SymbolRef"
                  symbol="//@classes.0/@members.1/@body/@statements.1/@assignee"/>
              <value
                  xsi:type="miniJava:Plus">
                <left
                    xsi:type="miniJava:MethodCall"
                    method="//@classes.0/@members.1">
                  <receiver
                      xsi:type="miniJava:This"/>
                  <args
                      xsi:type="miniJava:Minus">
                    <left
                        xsi:type="miniJava:SymbolRef"
                        symbol="//@classes.0/@members.1/@params.0"/>
                    <right
                        xsi:type="miniJava:IntConstant"
                        value="1"/>
                  </args>
                </left>
                <right
                    xsi:type="miniJava:MethodCall"
                    method="//@classes.0/@members.1">
                  <receiver
                      xsi:type="miniJava:This"/>
                  <args
                      xsi:type="miniJava:Minus">
                    <left
                        xsi:type="miniJava:SymbolRef"
                        symbol="//@classes.0/@members.1/@params.0"/>
                    <right
                        xsi:type="miniJava:IntConstant"
                        value="2"/>
                  </args>
                </right>
              </value>
            </statements>
          </thenBlock>
        </statements>
        <statements
            xsi:type="miniJava:Return">
          <expression
              xsi:type="miniJava:SymbolRef"
              symbol="//@classes.0/@members.1/@body/@statements.1/@assignee"/>
        </statements>
      </body>
    </members>
  </classes>
</miniJava:Program>
