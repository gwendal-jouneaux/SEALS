<?xml version="1.0" encoding="ASCII"?>
<miniJava:Program
    xmi:version="2.0"
    xmlns:xmi="http://www.omg.org/XMI"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:miniJava="platform:/resource/selfadaptable-minijava.lang.interpreter/interpreter-comp/miniJava.ecore">
  <classes xsi:type="miniJava:Clazz"
      name="Approximate">
    <members
        xsi:type="miniJava:Method"
        name="main"
        access="public"
        isstatic="true">
      <typeRef
          xsi:type="miniJava:VoidTypeRef"/>
      <body>
        <statements
            xsi:type="miniJava:Assignment">
          <assignee
              xsi:type="miniJava:VariableDeclaration"
              name="tabSize">
            <typeRef
                xsi:type="miniJava:IntegerTypeRef"/>
          </assignee>
          <value
              xsi:type="miniJava:IntConstant"
              value="10"/>
        </statements>
        <statements
            xsi:type="miniJava:Assignment">
          <assignee
              xsi:type="miniJava:VariableDeclaration"
              name="approximateTab">
            <typeRef
                xsi:type="miniJava:ArrayTypeRef">
              <typeRef
                  xsi:type="miniJava:IntegerTypeRef"/>
            </typeRef>
          </assignee>
          <value
              xsi:type="miniJava:NewArray">
            <type
                xsi:type="miniJava:IntegerTypeRef"/>
            <size
                xsi:type="miniJava:SymbolRef"
                symbol="//@classes.0/@members.0/@body/@statements.0/@assignee"/>
          </value>
        </statements>
        <statements
            xsi:type="miniJava:Assignment">
          <assignee
              xsi:type="miniJava:VariableDeclaration"
              name="exactTab">
            <typeRef
                xsi:type="miniJava:ArrayTypeRef">
              <typeRef
                  xsi:type="miniJava:IntegerTypeRef"/>
            </typeRef>
          </assignee>
          <value
              xsi:type="miniJava:NewArray">
            <type
                xsi:type="miniJava:IntegerTypeRef"/>
            <size
                xsi:type="miniJava:SymbolRef"
                symbol="//@classes.0/@members.0/@body/@statements.0/@assignee"/>
          </value>
        </statements>
        <statements
            xsi:type="miniJava:Assignment">
          <assignee
              xsi:type="miniJava:VariableDeclaration"
              name="const">
            <typeRef
                xsi:type="miniJava:IntegerTypeRef"/>
          </assignee>
          <value
              xsi:type="miniJava:IntConstant"
              value="1"/>
        </statements>
        <statements
            xsi:type="miniJava:PrintStatement">
          <expression
              xsi:type="miniJava:StringConstant"
              value="Approximate Loop :"/>
        </statements>
        <statements
            xsi:type="miniJava:ForStatement">
          <declaration>
            <assignee
                xsi:type="miniJava:VariableDeclaration"
                name="i">
              <typeRef
                  xsi:type="miniJava:IntegerTypeRef"/>
            </assignee>
            <value
                xsi:type="miniJava:IntConstant"/>
          </declaration>
          <condition
              xsi:type="miniJava:Inferior">
            <left
                xsi:type="miniJava:SymbolRef"
                symbol="//@classes.0/@members.0/@body/@statements.5/@declaration/@assignee"/>
            <right
                xsi:type="miniJava:SymbolRef"
                symbol="//@classes.0/@members.0/@body/@statements.0/@assignee"/>
          </condition>
          <progression>
            <assignee
                xsi:type="miniJava:SymbolRef"
                symbol="//@classes.0/@members.0/@body/@statements.5/@declaration/@assignee"/>
            <value
                xsi:type="miniJava:Plus">
              <left
                  xsi:type="miniJava:SymbolRef"
                  symbol="//@classes.0/@members.0/@body/@statements.5/@declaration/@assignee"/>
              <right
                  xsi:type="miniJava:IntConstant"
                  value="1"/>
            </value>
          </progression>
          <block>
            <statements
                xsi:type="miniJava:Assignment">
              <assignee
                  xsi:type="miniJava:ArrayAccess">
                <object
                    xsi:type="miniJava:SymbolRef"
                    symbol="//@classes.0/@members.0/@body/@statements.1/@assignee"/>
                <index
                    xsi:type="miniJava:SymbolRef"
                    symbol="//@classes.0/@members.0/@body/@statements.5/@declaration/@assignee"/>
              </assignee>
              <value
                  xsi:type="miniJava:Multiplication">
                <left
                    xsi:type="miniJava:SymbolRef"
                    symbol="//@classes.0/@members.0/@body/@statements.5/@declaration/@assignee"/>
                <right
                    xsi:type="miniJava:SymbolRef"
                    symbol="//@classes.0/@members.0/@body/@statements.5/@declaration/@assignee"/>
              </value>
            </statements>
            <statements
                xsi:type="miniJava:PrintStatement">
              <expression
                  xsi:type="miniJava:ArrayAccess">
                <object
                    xsi:type="miniJava:SymbolRef"
                    symbol="//@classes.0/@members.0/@body/@statements.1/@assignee"/>
                <index
                    xsi:type="miniJava:SymbolRef"
                    symbol="//@classes.0/@members.0/@body/@statements.5/@declaration/@assignee"/>
              </expression>
            </statements>
          </block>
        </statements>
        <statements
            xsi:type="miniJava:PrintStatement">
          <expression
              xsi:type="miniJava:StringConstant"
              value="Exact Loop :"/>
        </statements>
        <statements
            xsi:type="miniJava:ForStatement">
          <declaration>
            <assignee
                xsi:type="miniJava:VariableDeclaration"
                name="j">
              <typeRef
                  xsi:type="miniJava:IntegerTypeRef"/>
            </assignee>
            <value
                xsi:type="miniJava:IntConstant"/>
          </declaration>
          <condition
              xsi:type="miniJava:Inferior">
            <left
                xsi:type="miniJava:SymbolRef"
                symbol="//@classes.0/@members.0/@body/@statements.7/@declaration/@assignee"/>
            <right
                xsi:type="miniJava:SymbolRef"
                symbol="//@classes.0/@members.0/@body/@statements.0/@assignee"/>
          </condition>
          <progression>
            <assignee
                xsi:type="miniJava:SymbolRef"
                symbol="//@classes.0/@members.0/@body/@statements.7/@declaration/@assignee"/>
            <value
                xsi:type="miniJava:Plus">
              <left
                  xsi:type="miniJava:SymbolRef"
                  symbol="//@classes.0/@members.0/@body/@statements.7/@declaration/@assignee"/>
              <right
                  xsi:type="miniJava:SymbolRef"
                  symbol="//@classes.0/@members.0/@body/@statements.3/@assignee"/>
            </value>
          </progression>
          <block>
            <statements
                xsi:type="miniJava:Assignment">
              <assignee
                  xsi:type="miniJava:ArrayAccess">
                <object
                    xsi:type="miniJava:SymbolRef"
                    symbol="//@classes.0/@members.0/@body/@statements.2/@assignee"/>
                <index
                    xsi:type="miniJava:SymbolRef"
                    symbol="//@classes.0/@members.0/@body/@statements.7/@declaration/@assignee"/>
              </assignee>
              <value
                  xsi:type="miniJava:Multiplication">
                <left
                    xsi:type="miniJava:SymbolRef"
                    symbol="//@classes.0/@members.0/@body/@statements.7/@declaration/@assignee"/>
                <right
                    xsi:type="miniJava:SymbolRef"
                    symbol="//@classes.0/@members.0/@body/@statements.7/@declaration/@assignee"/>
              </value>
            </statements>
            <statements
                xsi:type="miniJava:PrintStatement">
              <expression
                  xsi:type="miniJava:ArrayAccess">
                <object
                    xsi:type="miniJava:SymbolRef"
                    symbol="//@classes.0/@members.0/@body/@statements.2/@assignee"/>
                <index
                    xsi:type="miniJava:SymbolRef"
                    symbol="//@classes.0/@members.0/@body/@statements.7/@declaration/@assignee"/>
              </expression>
            </statements>
          </block>
        </statements>
      </body>
    </members>
  </classes>
</miniJava:Program>
