/**
 * generated by Xtext 2.22.0
 */
package fr.gwendal_jouneaux.rob_lang.robLANG.impl;

import fr.gwendal_jouneaux.rob_lang.robLANG.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class RobLANGFactoryImpl extends EFactoryImpl implements RobLANGFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static RobLANGFactory init()
  {
    try
    {
      RobLANGFactory theRobLANGFactory = (RobLANGFactory)EPackage.Registry.INSTANCE.getEFactory(RobLANGPackage.eNS_URI);
      if (theRobLANGFactory != null)
      {
        return theRobLANGFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new RobLANGFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RobLANGFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case RobLANGPackage.ROBOT: return createRobot();
      case RobLANGPackage.BLOCK: return createBlock();
      case RobLANGPackage.TYPE: return createType();
      case RobLANGPackage.SYMBOL: return createSymbol();
      case RobLANGPackage.FUN_DEFINITION: return createFunDefinition();
      case RobLANGPackage.INLINE_FUNCTION: return createInlineFunction();
      case RobLANGPackage.COMPLEX_FUNCTION: return createComplexFunction();
      case RobLANGPackage.PARAMETER: return createParameter();
      case RobLANGPackage.FUN_PARAM: return createFunParam();
      case RobLANGPackage.FUN_CALL: return createFunCall();
      case RobLANGPackage.STATEMENT: return createStatement();
      case RobLANGPackage.VARIABLE: return createVariable();
      case RobLANGPackage.ASSIGNMENT: return createAssignment();
      case RobLANGPackage.PRINT_EXPRESSION: return createPrintExpression();
      case RobLANGPackage.LOOP: return createLoop();
      case RobLANGPackage.CONDITION: return createCondition();
      case RobLANGPackage.RETURN: return createReturn();
      case RobLANGPackage.BREAK: return createBreak();
      case RobLANGPackage.EXPRESSION: return createExpression();
      case RobLANGPackage.ARRAY_EXPRESSION: return createArrayExpression();
      case RobLANGPackage.ARRAY_STATEMENT: return createArrayStatement();
      case RobLANGPackage.ARRAY_NEW: return createArrayNew();
      case RobLANGPackage.ARRAY_LENGTH: return createArrayLength();
      case RobLANGPackage.ARRAY_GET: return createArrayGet();
      case RobLANGPackage.ARRAY_SET: return createArraySet();
      case RobLANGPackage.ARRAY_ADD: return createArrayAdd();
      case RobLANGPackage.ARRAY_REMOVE: return createArrayRemove();
      case RobLANGPackage.MATH_EXPRESSION: return createMathExpression();
      case RobLANGPackage.MATH_SQRT: return createMathSqrt();
      case RobLANGPackage.MATH_POW: return createMathPow();
      case RobLANGPackage.MATH_SIN: return createMathSin();
      case RobLANGPackage.MATH_COS: return createMathCos();
      case RobLANGPackage.MATH_ABS: return createMathAbs();
      case RobLANGPackage.MATH_MODULO: return createMathModulo();
      case RobLANGPackage.EFFECTOR: return createEffector();
      case RobLANGPackage.MOVE: return createMove();
      case RobLANGPackage.MOVE_FORWARD: return createMoveForward();
      case RobLANGPackage.MOVE_BACKWARD: return createMoveBackward();
      case RobLANGPackage.TURN: return createTurn();
      case RobLANGPackage.TURN_LEFT: return createTurnLeft();
      case RobLANGPackage.TURN_RIGHT: return createTurnRight();
      case RobLANGPackage.SPEED: return createSpeed();
      case RobLANGPackage.SET_NOMINAL_SPEED: return createSetNominalSpeed();
      case RobLANGPackage.GET_MAX_SPEED: return createGetMaxSpeed();
      case RobLANGPackage.SENSOR: return createSensor();
      case RobLANGPackage.SENSE_TIME: return createSenseTime();
      case RobLANGPackage.SENSE_BATTERY: return createSenseBattery();
      case RobLANGPackage.SENSE_POSITION: return createSensePosition();
      case RobLANGPackage.SENSE_DISTANCE: return createSenseDistance();
      case RobLANGPackage.SENSE_COMPASS: return createSenseCompass();
      case RobLANGPackage.ANNOTATED_EFFECTOR: return createAnnotatedEffector();
      case RobLANGPackage.FUN_PARAM_EXP: return createFunParamExp();
      case RobLANGPackage.FUN_PARAM_CAPTURE: return createFunParamCapture();
      case RobLANGPackage.OR: return createOr();
      case RobLANGPackage.AND: return createAnd();
      case RobLANGPackage.EQUALITY: return createEquality();
      case RobLANGPackage.INEQUALITY: return createInequality();
      case RobLANGPackage.GREATER_EQ: return createGreaterEq();
      case RobLANGPackage.LESS_EQ: return createLessEq();
      case RobLANGPackage.GREATER: return createGreater();
      case RobLANGPackage.LESS: return createLess();
      case RobLANGPackage.PLUS: return createPlus();
      case RobLANGPackage.MINUS: return createMinus();
      case RobLANGPackage.MULTIPLY: return createMultiply();
      case RobLANGPackage.DIVIDE: return createDivide();
      case RobLANGPackage.NOT: return createNot();
      case RobLANGPackage.INT_CONSTANT: return createIntConstant();
      case RobLANGPackage.DOUBLE_CONSTANT: return createDoubleConstant();
      case RobLANGPackage.STRING_CONSTANT: return createStringConstant();
      case RobLANGPackage.BOOL_CONSTANT: return createBoolConstant();
      case RobLANGPackage.SYMBOL_REF: return createSymbolRef();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case RobLANGPackage.BASIC_TYPE:
        return createBasicTypeFromString(eDataType, initialValue);
      case RobLANGPackage.ADAPTATION_PROPERTY:
        return createAdaptationPropertyFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case RobLANGPackage.BASIC_TYPE:
        return convertBasicTypeToString(eDataType, instanceValue);
      case RobLANGPackage.ADAPTATION_PROPERTY:
        return convertAdaptationPropertyToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Robot createRobot()
  {
    RobotImpl robot = new RobotImpl();
    return robot;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Block createBlock()
  {
    BlockImpl block = new BlockImpl();
    return block;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Type createType()
  {
    TypeImpl type = new TypeImpl();
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Symbol createSymbol()
  {
    SymbolImpl symbol = new SymbolImpl();
    return symbol;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunDefinition createFunDefinition()
  {
    FunDefinitionImpl funDefinition = new FunDefinitionImpl();
    return funDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InlineFunction createInlineFunction()
  {
    InlineFunctionImpl inlineFunction = new InlineFunctionImpl();
    return inlineFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComplexFunction createComplexFunction()
  {
    ComplexFunctionImpl complexFunction = new ComplexFunctionImpl();
    return complexFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Parameter createParameter()
  {
    ParameterImpl parameter = new ParameterImpl();
    return parameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunParam createFunParam()
  {
    FunParamImpl funParam = new FunParamImpl();
    return funParam;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunCall createFunCall()
  {
    FunCallImpl funCall = new FunCallImpl();
    return funCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Statement createStatement()
  {
    StatementImpl statement = new StatementImpl();
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Variable createVariable()
  {
    VariableImpl variable = new VariableImpl();
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Assignment createAssignment()
  {
    AssignmentImpl assignment = new AssignmentImpl();
    return assignment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PrintExpression createPrintExpression()
  {
    PrintExpressionImpl printExpression = new PrintExpressionImpl();
    return printExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Loop createLoop()
  {
    LoopImpl loop = new LoopImpl();
    return loop;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Condition createCondition()
  {
    ConditionImpl condition = new ConditionImpl();
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Return createReturn()
  {
    ReturnImpl return_ = new ReturnImpl();
    return return_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Break createBreak()
  {
    BreakImpl break_ = new BreakImpl();
    return break_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArrayExpression createArrayExpression()
  {
    ArrayExpressionImpl arrayExpression = new ArrayExpressionImpl();
    return arrayExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArrayStatement createArrayStatement()
  {
    ArrayStatementImpl arrayStatement = new ArrayStatementImpl();
    return arrayStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArrayNew createArrayNew()
  {
    ArrayNewImpl arrayNew = new ArrayNewImpl();
    return arrayNew;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArrayLength createArrayLength()
  {
    ArrayLengthImpl arrayLength = new ArrayLengthImpl();
    return arrayLength;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArrayGet createArrayGet()
  {
    ArrayGetImpl arrayGet = new ArrayGetImpl();
    return arrayGet;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArraySet createArraySet()
  {
    ArraySetImpl arraySet = new ArraySetImpl();
    return arraySet;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArrayAdd createArrayAdd()
  {
    ArrayAddImpl arrayAdd = new ArrayAddImpl();
    return arrayAdd;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArrayRemove createArrayRemove()
  {
    ArrayRemoveImpl arrayRemove = new ArrayRemoveImpl();
    return arrayRemove;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MathExpression createMathExpression()
  {
    MathExpressionImpl mathExpression = new MathExpressionImpl();
    return mathExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MathSqrt createMathSqrt()
  {
    MathSqrtImpl mathSqrt = new MathSqrtImpl();
    return mathSqrt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MathPow createMathPow()
  {
    MathPowImpl mathPow = new MathPowImpl();
    return mathPow;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MathSin createMathSin()
  {
    MathSinImpl mathSin = new MathSinImpl();
    return mathSin;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MathCos createMathCos()
  {
    MathCosImpl mathCos = new MathCosImpl();
    return mathCos;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MathAbs createMathAbs()
  {
    MathAbsImpl mathAbs = new MathAbsImpl();
    return mathAbs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MathModulo createMathModulo()
  {
    MathModuloImpl mathModulo = new MathModuloImpl();
    return mathModulo;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Effector createEffector()
  {
    EffectorImpl effector = new EffectorImpl();
    return effector;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Move createMove()
  {
    MoveImpl move = new MoveImpl();
    return move;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MoveForward createMoveForward()
  {
    MoveForwardImpl moveForward = new MoveForwardImpl();
    return moveForward;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MoveBackward createMoveBackward()
  {
    MoveBackwardImpl moveBackward = new MoveBackwardImpl();
    return moveBackward;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Turn createTurn()
  {
    TurnImpl turn = new TurnImpl();
    return turn;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TurnLeft createTurnLeft()
  {
    TurnLeftImpl turnLeft = new TurnLeftImpl();
    return turnLeft;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TurnRight createTurnRight()
  {
    TurnRightImpl turnRight = new TurnRightImpl();
    return turnRight;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Speed createSpeed()
  {
    SpeedImpl speed = new SpeedImpl();
    return speed;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SetNominalSpeed createSetNominalSpeed()
  {
    SetNominalSpeedImpl setNominalSpeed = new SetNominalSpeedImpl();
    return setNominalSpeed;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GetMaxSpeed createGetMaxSpeed()
  {
    GetMaxSpeedImpl getMaxSpeed = new GetMaxSpeedImpl();
    return getMaxSpeed;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Sensor createSensor()
  {
    SensorImpl sensor = new SensorImpl();
    return sensor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SenseTime createSenseTime()
  {
    SenseTimeImpl senseTime = new SenseTimeImpl();
    return senseTime;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SenseBattery createSenseBattery()
  {
    SenseBatteryImpl senseBattery = new SenseBatteryImpl();
    return senseBattery;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SensePosition createSensePosition()
  {
    SensePositionImpl sensePosition = new SensePositionImpl();
    return sensePosition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SenseDistance createSenseDistance()
  {
    SenseDistanceImpl senseDistance = new SenseDistanceImpl();
    return senseDistance;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SenseCompass createSenseCompass()
  {
    SenseCompassImpl senseCompass = new SenseCompassImpl();
    return senseCompass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AnnotatedEffector createAnnotatedEffector()
  {
    AnnotatedEffectorImpl annotatedEffector = new AnnotatedEffectorImpl();
    return annotatedEffector;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunParamExp createFunParamExp()
  {
    FunParamExpImpl funParamExp = new FunParamExpImpl();
    return funParamExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunParamCapture createFunParamCapture()
  {
    FunParamCaptureImpl funParamCapture = new FunParamCaptureImpl();
    return funParamCapture;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Or createOr()
  {
    OrImpl or = new OrImpl();
    return or;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public And createAnd()
  {
    AndImpl and = new AndImpl();
    return and;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Equality createEquality()
  {
    EqualityImpl equality = new EqualityImpl();
    return equality;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Inequality createInequality()
  {
    InequalityImpl inequality = new InequalityImpl();
    return inequality;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GreaterEq createGreaterEq()
  {
    GreaterEqImpl greaterEq = new GreaterEqImpl();
    return greaterEq;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LessEq createLessEq()
  {
    LessEqImpl lessEq = new LessEqImpl();
    return lessEq;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Greater createGreater()
  {
    GreaterImpl greater = new GreaterImpl();
    return greater;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Less createLess()
  {
    LessImpl less = new LessImpl();
    return less;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Plus createPlus()
  {
    PlusImpl plus = new PlusImpl();
    return plus;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Minus createMinus()
  {
    MinusImpl minus = new MinusImpl();
    return minus;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Multiply createMultiply()
  {
    MultiplyImpl multiply = new MultiplyImpl();
    return multiply;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Divide createDivide()
  {
    DivideImpl divide = new DivideImpl();
    return divide;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Not createNot()
  {
    NotImpl not = new NotImpl();
    return not;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IntConstant createIntConstant()
  {
    IntConstantImpl intConstant = new IntConstantImpl();
    return intConstant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DoubleConstant createDoubleConstant()
  {
    DoubleConstantImpl doubleConstant = new DoubleConstantImpl();
    return doubleConstant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StringConstant createStringConstant()
  {
    StringConstantImpl stringConstant = new StringConstantImpl();
    return stringConstant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BoolConstant createBoolConstant()
  {
    BoolConstantImpl boolConstant = new BoolConstantImpl();
    return boolConstant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SymbolRef createSymbolRef()
  {
    SymbolRefImpl symbolRef = new SymbolRefImpl();
    return symbolRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BasicType createBasicTypeFromString(EDataType eDataType, String initialValue)
  {
    BasicType result = BasicType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertBasicTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AdaptationProperty createAdaptationPropertyFromString(EDataType eDataType, String initialValue)
  {
    AdaptationProperty result = AdaptationProperty.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertAdaptationPropertyToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RobLANGPackage getRobLANGPackage()
  {
    return (RobLANGPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static RobLANGPackage getPackage()
  {
    return RobLANGPackage.eINSTANCE;
  }

} //RobLANGFactoryImpl
