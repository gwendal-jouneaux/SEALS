/**
 * generated by Xtext 2.22.0
 */
package fr.gwendal_jouneaux.rob_lang.robLANG.util;

import fr.gwendal_jouneaux.rob_lang.robLANG.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see fr.gwendal_jouneaux.rob_lang.robLANG.RobLANGPackage
 * @generated
 */
public class RobLANGAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static RobLANGPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RobLANGAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = RobLANGPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RobLANGSwitch<Adapter> modelSwitch =
    new RobLANGSwitch<Adapter>()
    {
      @Override
      public Adapter caseRobot(Robot object)
      {
        return createRobotAdapter();
      }
      @Override
      public Adapter caseBlock(Block object)
      {
        return createBlockAdapter();
      }
      @Override
      public Adapter caseType(Type object)
      {
        return createTypeAdapter();
      }
      @Override
      public Adapter caseSymbol(Symbol object)
      {
        return createSymbolAdapter();
      }
      @Override
      public Adapter caseFunDefinition(FunDefinition object)
      {
        return createFunDefinitionAdapter();
      }
      @Override
      public Adapter caseInlineFunction(InlineFunction object)
      {
        return createInlineFunctionAdapter();
      }
      @Override
      public Adapter caseComplexFunction(ComplexFunction object)
      {
        return createComplexFunctionAdapter();
      }
      @Override
      public Adapter caseParameter(Parameter object)
      {
        return createParameterAdapter();
      }
      @Override
      public Adapter caseFunParam(FunParam object)
      {
        return createFunParamAdapter();
      }
      @Override
      public Adapter caseFunCall(FunCall object)
      {
        return createFunCallAdapter();
      }
      @Override
      public Adapter caseStatement(Statement object)
      {
        return createStatementAdapter();
      }
      @Override
      public Adapter caseVariable(Variable object)
      {
        return createVariableAdapter();
      }
      @Override
      public Adapter caseAssignment(Assignment object)
      {
        return createAssignmentAdapter();
      }
      @Override
      public Adapter casePrintExpression(PrintExpression object)
      {
        return createPrintExpressionAdapter();
      }
      @Override
      public Adapter caseLoop(Loop object)
      {
        return createLoopAdapter();
      }
      @Override
      public Adapter caseCondition(Condition object)
      {
        return createConditionAdapter();
      }
      @Override
      public Adapter caseReturn(Return object)
      {
        return createReturnAdapter();
      }
      @Override
      public Adapter caseBreak(Break object)
      {
        return createBreakAdapter();
      }
      @Override
      public Adapter caseExpression(Expression object)
      {
        return createExpressionAdapter();
      }
      @Override
      public Adapter caseArrayExpression(ArrayExpression object)
      {
        return createArrayExpressionAdapter();
      }
      @Override
      public Adapter caseArrayStatement(ArrayStatement object)
      {
        return createArrayStatementAdapter();
      }
      @Override
      public Adapter caseArrayNew(ArrayNew object)
      {
        return createArrayNewAdapter();
      }
      @Override
      public Adapter caseArrayLength(ArrayLength object)
      {
        return createArrayLengthAdapter();
      }
      @Override
      public Adapter caseArrayGet(ArrayGet object)
      {
        return createArrayGetAdapter();
      }
      @Override
      public Adapter caseArraySet(ArraySet object)
      {
        return createArraySetAdapter();
      }
      @Override
      public Adapter caseArrayAdd(ArrayAdd object)
      {
        return createArrayAddAdapter();
      }
      @Override
      public Adapter caseArrayRemove(ArrayRemove object)
      {
        return createArrayRemoveAdapter();
      }
      @Override
      public Adapter caseMathExpression(MathExpression object)
      {
        return createMathExpressionAdapter();
      }
      @Override
      public Adapter caseMathSqrt(MathSqrt object)
      {
        return createMathSqrtAdapter();
      }
      @Override
      public Adapter caseMathPow(MathPow object)
      {
        return createMathPowAdapter();
      }
      @Override
      public Adapter caseMathSin(MathSin object)
      {
        return createMathSinAdapter();
      }
      @Override
      public Adapter caseMathCos(MathCos object)
      {
        return createMathCosAdapter();
      }
      @Override
      public Adapter caseMathAbs(MathAbs object)
      {
        return createMathAbsAdapter();
      }
      @Override
      public Adapter caseMathModulo(MathModulo object)
      {
        return createMathModuloAdapter();
      }
      @Override
      public Adapter caseEffector(Effector object)
      {
        return createEffectorAdapter();
      }
      @Override
      public Adapter caseMove(Move object)
      {
        return createMoveAdapter();
      }
      @Override
      public Adapter caseMoveForward(MoveForward object)
      {
        return createMoveForwardAdapter();
      }
      @Override
      public Adapter caseMoveBackward(MoveBackward object)
      {
        return createMoveBackwardAdapter();
      }
      @Override
      public Adapter caseTurn(Turn object)
      {
        return createTurnAdapter();
      }
      @Override
      public Adapter caseTurnLeft(TurnLeft object)
      {
        return createTurnLeftAdapter();
      }
      @Override
      public Adapter caseTurnRight(TurnRight object)
      {
        return createTurnRightAdapter();
      }
      @Override
      public Adapter caseSpeed(Speed object)
      {
        return createSpeedAdapter();
      }
      @Override
      public Adapter caseSetNominalSpeed(SetNominalSpeed object)
      {
        return createSetNominalSpeedAdapter();
      }
      @Override
      public Adapter caseGetMaxSpeed(GetMaxSpeed object)
      {
        return createGetMaxSpeedAdapter();
      }
      @Override
      public Adapter caseSensor(Sensor object)
      {
        return createSensorAdapter();
      }
      @Override
      public Adapter caseSenseTime(SenseTime object)
      {
        return createSenseTimeAdapter();
      }
      @Override
      public Adapter caseSenseBattery(SenseBattery object)
      {
        return createSenseBatteryAdapter();
      }
      @Override
      public Adapter caseSensePosition(SensePosition object)
      {
        return createSensePositionAdapter();
      }
      @Override
      public Adapter caseSenseDistance(SenseDistance object)
      {
        return createSenseDistanceAdapter();
      }
      @Override
      public Adapter caseSenseCompass(SenseCompass object)
      {
        return createSenseCompassAdapter();
      }
      @Override
      public Adapter caseAnnotatedEffector(AnnotatedEffector object)
      {
        return createAnnotatedEffectorAdapter();
      }
      @Override
      public Adapter caseFunParamExp(FunParamExp object)
      {
        return createFunParamExpAdapter();
      }
      @Override
      public Adapter caseFunParamCapture(FunParamCapture object)
      {
        return createFunParamCaptureAdapter();
      }
      @Override
      public Adapter caseOr(Or object)
      {
        return createOrAdapter();
      }
      @Override
      public Adapter caseAnd(And object)
      {
        return createAndAdapter();
      }
      @Override
      public Adapter caseEquality(Equality object)
      {
        return createEqualityAdapter();
      }
      @Override
      public Adapter caseInequality(Inequality object)
      {
        return createInequalityAdapter();
      }
      @Override
      public Adapter caseGreaterEq(GreaterEq object)
      {
        return createGreaterEqAdapter();
      }
      @Override
      public Adapter caseLessEq(LessEq object)
      {
        return createLessEqAdapter();
      }
      @Override
      public Adapter caseGreater(Greater object)
      {
        return createGreaterAdapter();
      }
      @Override
      public Adapter caseLess(Less object)
      {
        return createLessAdapter();
      }
      @Override
      public Adapter casePlus(Plus object)
      {
        return createPlusAdapter();
      }
      @Override
      public Adapter caseMinus(Minus object)
      {
        return createMinusAdapter();
      }
      @Override
      public Adapter caseMultiply(Multiply object)
      {
        return createMultiplyAdapter();
      }
      @Override
      public Adapter caseDivide(Divide object)
      {
        return createDivideAdapter();
      }
      @Override
      public Adapter caseNot(Not object)
      {
        return createNotAdapter();
      }
      @Override
      public Adapter caseIntConstant(IntConstant object)
      {
        return createIntConstantAdapter();
      }
      @Override
      public Adapter caseDoubleConstant(DoubleConstant object)
      {
        return createDoubleConstantAdapter();
      }
      @Override
      public Adapter caseStringConstant(StringConstant object)
      {
        return createStringConstantAdapter();
      }
      @Override
      public Adapter caseBoolConstant(BoolConstant object)
      {
        return createBoolConstantAdapter();
      }
      @Override
      public Adapter caseSymbolRef(SymbolRef object)
      {
        return createSymbolRefAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.Robot <em>Robot</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.Robot
   * @generated
   */
  public Adapter createRobotAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.Block <em>Block</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.Block
   * @generated
   */
  public Adapter createBlockAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.Type <em>Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.Type
   * @generated
   */
  public Adapter createTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.Symbol <em>Symbol</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.Symbol
   * @generated
   */
  public Adapter createSymbolAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.FunDefinition <em>Fun Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.FunDefinition
   * @generated
   */
  public Adapter createFunDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.InlineFunction <em>Inline Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.InlineFunction
   * @generated
   */
  public Adapter createInlineFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.ComplexFunction <em>Complex Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.ComplexFunction
   * @generated
   */
  public Adapter createComplexFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.Parameter <em>Parameter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.Parameter
   * @generated
   */
  public Adapter createParameterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.FunParam <em>Fun Param</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.FunParam
   * @generated
   */
  public Adapter createFunParamAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.FunCall <em>Fun Call</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.FunCall
   * @generated
   */
  public Adapter createFunCallAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.Statement <em>Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.Statement
   * @generated
   */
  public Adapter createStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.Variable <em>Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.Variable
   * @generated
   */
  public Adapter createVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.Assignment <em>Assignment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.Assignment
   * @generated
   */
  public Adapter createAssignmentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.PrintExpression <em>Print Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.PrintExpression
   * @generated
   */
  public Adapter createPrintExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.Loop <em>Loop</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.Loop
   * @generated
   */
  public Adapter createLoopAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.Condition <em>Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.Condition
   * @generated
   */
  public Adapter createConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.Return <em>Return</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.Return
   * @generated
   */
  public Adapter createReturnAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.Break <em>Break</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.Break
   * @generated
   */
  public Adapter createBreakAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.Expression <em>Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.Expression
   * @generated
   */
  public Adapter createExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.ArrayExpression <em>Array Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.ArrayExpression
   * @generated
   */
  public Adapter createArrayExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.ArrayStatement <em>Array Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.ArrayStatement
   * @generated
   */
  public Adapter createArrayStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.ArrayNew <em>Array New</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.ArrayNew
   * @generated
   */
  public Adapter createArrayNewAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.ArrayLength <em>Array Length</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.ArrayLength
   * @generated
   */
  public Adapter createArrayLengthAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.ArrayGet <em>Array Get</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.ArrayGet
   * @generated
   */
  public Adapter createArrayGetAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.ArraySet <em>Array Set</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.ArraySet
   * @generated
   */
  public Adapter createArraySetAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.ArrayAdd <em>Array Add</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.ArrayAdd
   * @generated
   */
  public Adapter createArrayAddAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.ArrayRemove <em>Array Remove</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.ArrayRemove
   * @generated
   */
  public Adapter createArrayRemoveAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.MathExpression <em>Math Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.MathExpression
   * @generated
   */
  public Adapter createMathExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.MathSqrt <em>Math Sqrt</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.MathSqrt
   * @generated
   */
  public Adapter createMathSqrtAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.MathPow <em>Math Pow</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.MathPow
   * @generated
   */
  public Adapter createMathPowAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.MathSin <em>Math Sin</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.MathSin
   * @generated
   */
  public Adapter createMathSinAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.MathCos <em>Math Cos</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.MathCos
   * @generated
   */
  public Adapter createMathCosAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.MathAbs <em>Math Abs</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.MathAbs
   * @generated
   */
  public Adapter createMathAbsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.MathModulo <em>Math Modulo</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.MathModulo
   * @generated
   */
  public Adapter createMathModuloAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.Effector <em>Effector</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.Effector
   * @generated
   */
  public Adapter createEffectorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.Move <em>Move</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.Move
   * @generated
   */
  public Adapter createMoveAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.MoveForward <em>Move Forward</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.MoveForward
   * @generated
   */
  public Adapter createMoveForwardAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.MoveBackward <em>Move Backward</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.MoveBackward
   * @generated
   */
  public Adapter createMoveBackwardAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.Turn <em>Turn</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.Turn
   * @generated
   */
  public Adapter createTurnAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.TurnLeft <em>Turn Left</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.TurnLeft
   * @generated
   */
  public Adapter createTurnLeftAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.TurnRight <em>Turn Right</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.TurnRight
   * @generated
   */
  public Adapter createTurnRightAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.Speed <em>Speed</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.Speed
   * @generated
   */
  public Adapter createSpeedAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.SetNominalSpeed <em>Set Nominal Speed</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.SetNominalSpeed
   * @generated
   */
  public Adapter createSetNominalSpeedAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.GetMaxSpeed <em>Get Max Speed</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.GetMaxSpeed
   * @generated
   */
  public Adapter createGetMaxSpeedAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.Sensor <em>Sensor</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.Sensor
   * @generated
   */
  public Adapter createSensorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.SenseTime <em>Sense Time</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.SenseTime
   * @generated
   */
  public Adapter createSenseTimeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.SenseBattery <em>Sense Battery</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.SenseBattery
   * @generated
   */
  public Adapter createSenseBatteryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.SensePosition <em>Sense Position</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.SensePosition
   * @generated
   */
  public Adapter createSensePositionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.SenseDistance <em>Sense Distance</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.SenseDistance
   * @generated
   */
  public Adapter createSenseDistanceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.SenseCompass <em>Sense Compass</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.SenseCompass
   * @generated
   */
  public Adapter createSenseCompassAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.AnnotatedEffector <em>Annotated Effector</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.AnnotatedEffector
   * @generated
   */
  public Adapter createAnnotatedEffectorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.FunParamExp <em>Fun Param Exp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.FunParamExp
   * @generated
   */
  public Adapter createFunParamExpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.FunParamCapture <em>Fun Param Capture</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.FunParamCapture
   * @generated
   */
  public Adapter createFunParamCaptureAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.Or <em>Or</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.Or
   * @generated
   */
  public Adapter createOrAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.And <em>And</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.And
   * @generated
   */
  public Adapter createAndAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.Equality <em>Equality</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.Equality
   * @generated
   */
  public Adapter createEqualityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.Inequality <em>Inequality</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.Inequality
   * @generated
   */
  public Adapter createInequalityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.GreaterEq <em>Greater Eq</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.GreaterEq
   * @generated
   */
  public Adapter createGreaterEqAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.LessEq <em>Less Eq</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.LessEq
   * @generated
   */
  public Adapter createLessEqAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.Greater <em>Greater</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.Greater
   * @generated
   */
  public Adapter createGreaterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.Less <em>Less</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.Less
   * @generated
   */
  public Adapter createLessAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.Plus <em>Plus</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.Plus
   * @generated
   */
  public Adapter createPlusAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.Minus <em>Minus</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.Minus
   * @generated
   */
  public Adapter createMinusAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.Multiply <em>Multiply</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.Multiply
   * @generated
   */
  public Adapter createMultiplyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.Divide <em>Divide</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.Divide
   * @generated
   */
  public Adapter createDivideAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.Not <em>Not</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.Not
   * @generated
   */
  public Adapter createNotAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.IntConstant <em>Int Constant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.IntConstant
   * @generated
   */
  public Adapter createIntConstantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.DoubleConstant <em>Double Constant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.DoubleConstant
   * @generated
   */
  public Adapter createDoubleConstantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.StringConstant <em>String Constant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.StringConstant
   * @generated
   */
  public Adapter createStringConstantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.BoolConstant <em>Bool Constant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.BoolConstant
   * @generated
   */
  public Adapter createBoolConstantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.gwendal_jouneaux.rob_lang.robLANG.SymbolRef <em>Symbol Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.gwendal_jouneaux.rob_lang.robLANG.SymbolRef
   * @generated
   */
  public Adapter createSymbolRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //RobLANGAdapterFactory
