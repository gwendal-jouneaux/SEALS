/*
 * generated by Xtext 2.22.0
 */
package fr.gwendal_jouneaux.rob_lang.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class RobLANGGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class RobotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.gwendal_jouneaux.rob_lang.RobLANG.Robot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRobotKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFunctionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFunctionsFunDefinitionParserRuleCall_3_0 = (RuleCall)cFunctionsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Robot:
		//	'Robot' name=ID '{' functions+=FunDefinition+ '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Robot' name=ID '{' functions+=FunDefinition+ '}'
		public Group getGroup() { return cGroup; }
		
		//'Robot'
		public Keyword getRobotKeyword_0() { return cRobotKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//functions+=FunDefinition+
		public Assignment getFunctionsAssignment_3() { return cFunctionsAssignment_3; }
		
		//FunDefinition
		public RuleCall getFunctionsFunDefinitionParserRuleCall_3_0() { return cFunctionsFunDefinitionParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.gwendal_jouneaux.rob_lang.RobLANG.Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		///********************************************************************************************************************
		// *                                                 UTILS                                                            *
		// *******************************************************************************************************************/ Block:
		//	{Block} '{' statements+=Statement* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Block} '{' statements+=Statement* '}'
		public Group getGroup() { return cGroup; }
		
		//{Block}
		public Action getBlockAction_0() { return cBlockAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_2_0() { return cStatementsStatementParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.gwendal_jouneaux.rob_lang.RobLANG.Type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeBasicTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDimensionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDimensionINTTerminalRuleCall_1_1_0 = (RuleCall)cDimensionAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Type:
		//	type=BasicType ("[" dimension=INT "]")?;
		@Override public ParserRule getRule() { return rule; }
		
		//type=BasicType ("[" dimension=INT "]")?
		public Group getGroup() { return cGroup; }
		
		//type=BasicType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//BasicType
		public RuleCall getTypeBasicTypeEnumRuleCall_0_0() { return cTypeBasicTypeEnumRuleCall_0_0; }
		
		//("[" dimension=INT "]")?
		public Group getGroup_1() { return cGroup_1; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//dimension=INT
		public Assignment getDimensionAssignment_1_1() { return cDimensionAssignment_1_1; }
		
		//INT
		public RuleCall getDimensionINTTerminalRuleCall_1_1_0() { return cDimensionINTTerminalRuleCall_1_1_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
	}
	public class SymbolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.gwendal_jouneaux.rob_lang.RobLANG.Symbol");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParameterParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Symbol:
		//	Variable | Parameter;
		@Override public ParserRule getRule() { return rule; }
		
		//Variable | Parameter
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Variable
		public RuleCall getVariableParserRuleCall_0() { return cVariableParserRuleCall_0; }
		
		//Parameter
		public RuleCall getParameterParserRuleCall_1() { return cParameterParserRuleCall_1; }
	}
	public class FunDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.gwendal_jouneaux.rob_lang.RobLANG.FunDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInlineFunctionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComplexFunctionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///********************************************************************************************************************
		// *                                               FUNCTIONS                                                          *
		// *******************************************************************************************************************/ FunDefinition:
		//	InlineFunction | ComplexFunction;
		@Override public ParserRule getRule() { return rule; }
		
		//InlineFunction | ComplexFunction
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//InlineFunction
		public RuleCall getInlineFunctionParserRuleCall_0() { return cInlineFunctionParserRuleCall_0; }
		
		//ComplexFunction
		public RuleCall getComplexFunctionParserRuleCall_1() { return cComplexFunctionParserRuleCall_1; }
	}
	public class InlineFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.gwendal_jouneaux.rob_lang.RobLANG.InlineFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cVarNamesAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cVarNamesParameterParserRuleCall_4_0_0 = (RuleCall)cVarNamesAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cVarNamesAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cVarNamesParameterParserRuleCall_4_1_1_0 = (RuleCall)cVarNamesAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignGreaterThanSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cExpressionAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cExpressionExpressionParserRuleCall_7_0 = (RuleCall)cExpressionAssignment_7.eContents().get(0);
		
		//InlineFunction:
		//	'let' type=Type name=ID '(' (varNames+=Parameter (',' varNames+=Parameter)*)? ')' '=>' expression=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//'let' type=Type name=ID '(' (varNames+=Parameter (',' varNames+=Parameter)*)? ')' '=>' expression=Expression
		public Group getGroup() { return cGroup; }
		
		//'let'
		public Keyword getLetKeyword_0() { return cLetKeyword_0; }
		
		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//(varNames+=Parameter (',' varNames+=Parameter)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//varNames+=Parameter
		public Assignment getVarNamesAssignment_4_0() { return cVarNamesAssignment_4_0; }
		
		//Parameter
		public RuleCall getVarNamesParameterParserRuleCall_4_0_0() { return cVarNamesParameterParserRuleCall_4_0_0; }
		
		//(',' varNames+=Parameter)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//','
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//varNames+=Parameter
		public Assignment getVarNamesAssignment_4_1_1() { return cVarNamesAssignment_4_1_1; }
		
		//Parameter
		public RuleCall getVarNamesParameterParserRuleCall_4_1_1_0() { return cVarNamesParameterParserRuleCall_4_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_6() { return cEqualsSignGreaterThanSignKeyword_6; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_7() { return cExpressionAssignment_7; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_7_0() { return cExpressionExpressionParserRuleCall_7_0; }
	}
	public class ComplexFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.gwendal_jouneaux.rob_lang.RobLANG.ComplexFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cVarNamesAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cVarNamesParameterParserRuleCall_4_0_0 = (RuleCall)cVarNamesAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cVarNamesAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cVarNamesParameterParserRuleCall_4_1_1_0 = (RuleCall)cVarNamesAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBodyBlockParserRuleCall_6_0 = (RuleCall)cBodyAssignment_6.eContents().get(0);
		
		//ComplexFunction:
		//	'let' type=Type name=ID '(' (varNames+=Parameter (',' varNames+=Parameter)*)? ')' body=Block;
		@Override public ParserRule getRule() { return rule; }
		
		//'let' type=Type name=ID '(' (varNames+=Parameter (',' varNames+=Parameter)*)? ')' body=Block
		public Group getGroup() { return cGroup; }
		
		//'let'
		public Keyword getLetKeyword_0() { return cLetKeyword_0; }
		
		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//(varNames+=Parameter (',' varNames+=Parameter)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//varNames+=Parameter
		public Assignment getVarNamesAssignment_4_0() { return cVarNamesAssignment_4_0; }
		
		//Parameter
		public RuleCall getVarNamesParameterParserRuleCall_4_0_0() { return cVarNamesParameterParserRuleCall_4_0_0; }
		
		//(',' varNames+=Parameter)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//','
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//varNames+=Parameter
		public Assignment getVarNamesAssignment_4_1_1() { return cVarNamesAssignment_4_1_1; }
		
		//Parameter
		public RuleCall getVarNamesParameterParserRuleCall_4_1_1_0() { return cVarNamesParameterParserRuleCall_4_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//body=Block
		public Assignment getBodyAssignment_6() { return cBodyAssignment_6; }
		
		//Block
		public RuleCall getBodyBlockParserRuleCall_6_0() { return cBodyBlockParserRuleCall_6_0; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.gwendal_jouneaux.rob_lang.RobLANG.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Parameter:
		//	type=Type name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//type=Type name=ID
		public Group getGroup() { return cGroup; }
		
		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class FunParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.gwendal_jouneaux.rob_lang.RobLANG.FunParam");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cFunParamExpAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cExprAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_0_1_0 = (RuleCall)cExprAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cFunParamCaptureAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cVariableAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final CrossReference cVariableVariableCrossReference_1_2_0 = (CrossReference)cVariableAssignment_1_2.eContents().get(0);
		private final RuleCall cVariableVariableIDTerminalRuleCall_1_2_0_1 = (RuleCall)cVariableVariableCrossReference_1_2_0.eContents().get(1);
		
		//FunParam:
		//	{FunParamExp} expr=Expression | {FunParamCapture} ':' variable=[Variable];
		@Override public ParserRule getRule() { return rule; }
		
		//{FunParamExp} expr=Expression | {FunParamCapture} ':' variable=[Variable]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{FunParamExp} expr=Expression
		public Group getGroup_0() { return cGroup_0; }
		
		//{FunParamExp}
		public Action getFunParamExpAction_0_0() { return cFunParamExpAction_0_0; }
		
		//expr=Expression
		public Assignment getExprAssignment_0_1() { return cExprAssignment_0_1; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_0_1_0() { return cExprExpressionParserRuleCall_0_1_0; }
		
		//{FunParamCapture} ':' variable=[Variable]
		public Group getGroup_1() { return cGroup_1; }
		
		//{FunParamCapture}
		public Action getFunParamCaptureAction_1_0() { return cFunParamCaptureAction_1_0; }
		
		//':'
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }
		
		//variable=[Variable]
		public Assignment getVariableAssignment_1_2() { return cVariableAssignment_1_2; }
		
		//[Variable]
		public CrossReference getVariableVariableCrossReference_1_2_0() { return cVariableVariableCrossReference_1_2_0; }
		
		//ID
		public RuleCall getVariableVariableIDTerminalRuleCall_1_2_0_1() { return cVariableVariableIDTerminalRuleCall_1_2_0_1; }
	}
	public class FunCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.gwendal_jouneaux.rob_lang.RobLANG.FunCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunctionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFunctionFunDefinitionCrossReference_0_0 = (CrossReference)cFunctionAssignment_0.eContents().get(0);
		private final RuleCall cFunctionFunDefinitionIDTerminalRuleCall_0_0_1 = (RuleCall)cFunctionFunDefinitionCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParamsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParamsFunParamParserRuleCall_2_0_0 = (RuleCall)cParamsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParamsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParamsFunParamParserRuleCall_2_1_1_0 = (RuleCall)cParamsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FunCall:
		//	function=[FunDefinition] '(' (params+=FunParam (',' params+=FunParam)*)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//function=[FunDefinition] '(' (params+=FunParam (',' params+=FunParam)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//function=[FunDefinition]
		public Assignment getFunctionAssignment_0() { return cFunctionAssignment_0; }
		
		//[FunDefinition]
		public CrossReference getFunctionFunDefinitionCrossReference_0_0() { return cFunctionFunDefinitionCrossReference_0_0; }
		
		//ID
		public RuleCall getFunctionFunDefinitionIDTerminalRuleCall_0_0_1() { return cFunctionFunDefinitionIDTerminalRuleCall_0_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(params+=FunParam (',' params+=FunParam)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//params+=FunParam
		public Assignment getParamsAssignment_2_0() { return cParamsAssignment_2_0; }
		
		//FunParam
		public RuleCall getParamsFunParamParserRuleCall_2_0_0() { return cParamsFunParamParserRuleCall_2_0_0; }
		
		//(',' params+=FunParam)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//params+=FunParam
		public Assignment getParamsAssignment_2_1_1() { return cParamsAssignment_2_1_1; }
		
		//FunParam
		public RuleCall getParamsFunParamParserRuleCall_2_1_1_0() { return cParamsFunParamParserRuleCall_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.gwendal_jouneaux.rob_lang.RobLANG.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAssignmentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPrintExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLoopParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cConditionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cEffectorParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cArrayStatementParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cReturnParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cBreakParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cExpressionParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		///********************************************************************************************************************
		// *                                               STATEMENTS                                                         *
		// *******************************************************************************************************************/ Statement:
		//	Variable | Assignment | PrintExpression | Loop | Condition | Effector | ArrayStatement | Return | Break | Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//Variable | Assignment | PrintExpression | Loop | Condition | Effector | ArrayStatement | Return | Break | Expression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Variable
		public RuleCall getVariableParserRuleCall_0() { return cVariableParserRuleCall_0; }
		
		//Assignment
		public RuleCall getAssignmentParserRuleCall_1() { return cAssignmentParserRuleCall_1; }
		
		//PrintExpression
		public RuleCall getPrintExpressionParserRuleCall_2() { return cPrintExpressionParserRuleCall_2; }
		
		//Loop
		public RuleCall getLoopParserRuleCall_3() { return cLoopParserRuleCall_3; }
		
		//Condition
		public RuleCall getConditionParserRuleCall_4() { return cConditionParserRuleCall_4; }
		
		//Effector
		public RuleCall getEffectorParserRuleCall_5() { return cEffectorParserRuleCall_5; }
		
		//ArrayStatement
		public RuleCall getArrayStatementParserRuleCall_6() { return cArrayStatementParserRuleCall_6; }
		
		//Return
		public RuleCall getReturnParserRuleCall_7() { return cReturnParserRuleCall_7; }
		
		//Break
		public RuleCall getBreakParserRuleCall_8() { return cBreakParserRuleCall_8; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_9() { return cExpressionParserRuleCall_9; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.gwendal_jouneaux.rob_lang.RobLANG.Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionExpressionParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		
		//Variable:
		//	'var' type=Type name=ID '=' expression=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//'var' type=Type name=ID '=' expression=Expression
		public Group getGroup() { return cGroup; }
		
		//'var'
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_4_0() { return cExpressionExpressionParserRuleCall_4_0; }
	}
	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.gwendal_jouneaux.rob_lang.RobLANG.Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAssigneeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cAssigneeSymbolCrossReference_0_0 = (CrossReference)cAssigneeAssignment_0.eContents().get(0);
		private final RuleCall cAssigneeSymbolIDTerminalRuleCall_0_0_1 = (RuleCall)cAssigneeSymbolCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//Assignment:
		//	assignee=[Symbol] '=' expression=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//assignee=[Symbol] '=' expression=Expression
		public Group getGroup() { return cGroup; }
		
		//assignee=[Symbol]
		public Assignment getAssigneeAssignment_0() { return cAssigneeAssignment_0; }
		
		//[Symbol]
		public CrossReference getAssigneeSymbolCrossReference_0_0() { return cAssigneeSymbolCrossReference_0_0; }
		
		//ID
		public RuleCall getAssigneeSymbolIDTerminalRuleCall_0_0_1() { return cAssigneeSymbolIDTerminalRuleCall_0_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
	}
	public class PrintExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.gwendal_jouneaux.rob_lang.RobLANG.PrintExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrintKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//PrintExpression:
		//	'print' expression=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//'print' expression=Expression
		public Group getGroup() { return cGroup; }
		
		//'print'
		public Keyword getPrintKeyword_0() { return cPrintKeyword_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
	}
	public class LoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.gwendal_jouneaux.rob_lang.RobLANG.Loop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLoopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyBlockParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		
		//Loop:
		//	'loop' expression=Expression body=Block;
		@Override public ParserRule getRule() { return rule; }
		
		//'loop' expression=Expression body=Block
		public Group getGroup() { return cGroup; }
		
		//'loop'
		public Keyword getLoopKeyword_0() { return cLoopKeyword_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
		
		//body=Block
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }
		
		//Block
		public RuleCall getBodyBlockParserRuleCall_2_0() { return cBodyBlockParserRuleCall_2_0; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.gwendal_jouneaux.rob_lang.RobLANG.Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Assignment cIfzAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIfzBlockParserRuleCall_2_0 = (RuleCall)cIfzAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cElseKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cElsezAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cElsezBlockParserRuleCall_3_1_0 = (RuleCall)cElsezAssignment_3_1.eContents().get(0);
		
		//Condition:
		//	'if' expression=Expression ifz=Block ('else' elsez=Block)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' expression=Expression ifz=Block ('else' elsez=Block)?
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
		
		//ifz=Block
		public Assignment getIfzAssignment_2() { return cIfzAssignment_2; }
		
		//Block
		public RuleCall getIfzBlockParserRuleCall_2_0() { return cIfzBlockParserRuleCall_2_0; }
		
		//('else' elsez=Block)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'else'
		public Keyword getElseKeyword_3_0() { return cElseKeyword_3_0; }
		
		//elsez=Block
		public Assignment getElsezAssignment_3_1() { return cElsezAssignment_3_1; }
		
		//Block
		public RuleCall getElsezBlockParserRuleCall_3_1_0() { return cElsezBlockParserRuleCall_3_1_0; }
	}
	public class ReturnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.gwendal_jouneaux.rob_lang.RobLANG.Return");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReturnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//Return:
		//	"return" expression=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//"return" expression=Expression
		public Group getGroup() { return cGroup; }
		
		//"return"
		public Keyword getReturnKeyword_0() { return cReturnKeyword_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
	}
	public class BreakElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.gwendal_jouneaux.rob_lang.RobLANG.Break");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBreakAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBreakKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Break:
		//	{Break} "break";
		@Override public ParserRule getRule() { return rule; }
		
		//{Break} "break"
		public Group getGroup() { return cGroup; }
		
		//{Break}
		public Action getBreakAction_0() { return cBreakAction_0; }
		
		//"break"
		public Keyword getBreakKeyword_1() { return cBreakKeyword_1; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.gwendal_jouneaux.rob_lang.RobLANG.Expression");
		private final RuleCall cOrParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		///********************************************************************************************************************
		// *                                               EXPRESSION                                                         *
		// *******************************************************************************************************************/ Expression:
		//	Or;
		@Override public ParserRule getRule() { return rule; }
		
		//Or
		public RuleCall getOrParserRuleCall() { return cOrParserRuleCall; }
	}
	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.gwendal_jouneaux.rob_lang.RobLANG.Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Or Expression:
		//	And ({Or.left=current} "||" right=And)*;
		@Override public ParserRule getRule() { return rule; }
		
		//And ({Or.left=current} "||" right=And)*
		public Group getGroup() { return cGroup; }
		
		//And
		public RuleCall getAndParserRuleCall_0() { return cAndParserRuleCall_0; }
		
		//({Or.left=current} "||" right=And)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Or.left=current}
		public Action getOrLeftAction_1_0() { return cOrLeftAction_1_0; }
		
		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_1() { return cVerticalLineVerticalLineKeyword_1_1; }
		
		//right=And
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//And
		public RuleCall getRightAndParserRuleCall_1_2_0() { return cRightAndParserRuleCall_1_2_0; }
	}
	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.gwendal_jouneaux.rob_lang.RobLANG.And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualityParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightEqualityParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//And Expression:
		//	Equality ({And.left=current} "&&" right=Equality)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Equality ({And.left=current} "&&" right=Equality)*
		public Group getGroup() { return cGroup; }
		
		//Equality
		public RuleCall getEqualityParserRuleCall_0() { return cEqualityParserRuleCall_0; }
		
		//({And.left=current} "&&" right=Equality)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{And.left=current}
		public Action getAndLeftAction_1_0() { return cAndLeftAction_1_0; }
		
		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1_1() { return cAmpersandAmpersandKeyword_1_1; }
		
		//right=Equality
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Equality
		public RuleCall getRightEqualityParserRuleCall_1_2_0() { return cRightEqualityParserRuleCall_1_2_0; }
	}
	public class EqualityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.gwendal_jouneaux.rob_lang.RobLANG.Equality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cEqualityLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cInequalityLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightComparisonParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Equality Expression:
		//	Comparison (({Equality.left=current} '==' | {Inequality.left=current} '!=') right=Comparison)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Comparison (({Equality.left=current} '==' | {Inequality.left=current} '!=') right=Comparison)*
		public Group getGroup() { return cGroup; }
		
		//Comparison
		public RuleCall getComparisonParserRuleCall_0() { return cComparisonParserRuleCall_0; }
		
		//(({Equality.left=current} '==' | {Inequality.left=current} '!=') right=Comparison)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Equality.left=current} '==' | {Inequality.left=current} '!='
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Equality.left=current} '=='
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Equality.left=current}
		public Action getEqualityLeftAction_1_0_0_0() { return cEqualityLeftAction_1_0_0_0; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_1_0_0_1() { return cEqualsSignEqualsSignKeyword_1_0_0_1; }
		
		//{Inequality.left=current} '!='
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Inequality.left=current}
		public Action getInequalityLeftAction_1_0_1_0() { return cInequalityLeftAction_1_0_1_0; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_1_0_1_1() { return cExclamationMarkEqualsSignKeyword_1_0_1_1; }
		
		//right=Comparison
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Comparison
		public RuleCall getRightComparisonParserRuleCall_1_1_0() { return cRightComparisonParserRuleCall_1_1_0; }
	}
	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.gwendal_jouneaux.rob_lang.RobLANG.Comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPlusOrMinusParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cGreaterEqLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cLessEqLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Group cGroup_1_0_2 = (Group)cAlternatives_1_0.eContents().get(2);
		private final Action cGreaterLeftAction_1_0_2_0 = (Action)cGroup_1_0_2.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_0_2_1 = (Keyword)cGroup_1_0_2.eContents().get(1);
		private final Group cGroup_1_0_3 = (Group)cAlternatives_1_0.eContents().get(3);
		private final Action cLessLeftAction_1_0_3_0 = (Action)cGroup_1_0_3.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_0_3_1 = (Keyword)cGroup_1_0_3.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPlusOrMinusParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Comparison Expression:
		//	PlusOrMinus (({GreaterEq.left=current} ">=" | {LessEq.left=current} "<=" | {Greater.left=current} '>' |
		//	{Less.left=current} "<") right=PlusOrMinus)*;
		@Override public ParserRule getRule() { return rule; }
		
		//PlusOrMinus (({GreaterEq.left=current} ">=" | {LessEq.left=current} "<=" | {Greater.left=current} '>' |
		//{Less.left=current} "<") right=PlusOrMinus)*
		public Group getGroup() { return cGroup; }
		
		//PlusOrMinus
		public RuleCall getPlusOrMinusParserRuleCall_0() { return cPlusOrMinusParserRuleCall_0; }
		
		//(({GreaterEq.left=current} ">=" | {LessEq.left=current} "<=" | {Greater.left=current} '>' | {Less.left=current} "<")
		//right=PlusOrMinus)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{GreaterEq.left=current} ">=" | {LessEq.left=current} "<=" | {Greater.left=current} '>' | {Less.left=current} "<"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{GreaterEq.left=current} ">="
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{GreaterEq.left=current}
		public Action getGreaterEqLeftAction_1_0_0_0() { return cGreaterEqLeftAction_1_0_0_0; }
		
		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_1_0_0_1() { return cGreaterThanSignEqualsSignKeyword_1_0_0_1; }
		
		//{LessEq.left=current} "<="
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{LessEq.left=current}
		public Action getLessEqLeftAction_1_0_1_0() { return cLessEqLeftAction_1_0_1_0; }
		
		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_1_0_1_1() { return cLessThanSignEqualsSignKeyword_1_0_1_1; }
		
		//{Greater.left=current} '>'
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }
		
		//{Greater.left=current}
		public Action getGreaterLeftAction_1_0_2_0() { return cGreaterLeftAction_1_0_2_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1_0_2_1() { return cGreaterThanSignKeyword_1_0_2_1; }
		
		//{Less.left=current} "<"
		public Group getGroup_1_0_3() { return cGroup_1_0_3; }
		
		//{Less.left=current}
		public Action getLessLeftAction_1_0_3_0() { return cLessLeftAction_1_0_3_0; }
		
		//"<"
		public Keyword getLessThanSignKeyword_1_0_3_1() { return cLessThanSignKeyword_1_0_3_1; }
		
		//right=PlusOrMinus
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//PlusOrMinus
		public RuleCall getRightPlusOrMinusParserRuleCall_1_1_0() { return cRightPlusOrMinusParserRuleCall_1_1_0; }
	}
	public class PlusOrMinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.gwendal_jouneaux.rob_lang.RobLANG.PlusOrMinus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMulOrDivParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cMinusLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMulOrDivParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//PlusOrMinus Expression:
		//	MulOrDiv (({Plus.left=current} '+' | {Minus.left=current} '-') right=MulOrDiv)*;
		@Override public ParserRule getRule() { return rule; }
		
		//MulOrDiv (({Plus.left=current} '+' | {Minus.left=current} '-') right=MulOrDiv)*
		public Group getGroup() { return cGroup; }
		
		//MulOrDiv
		public RuleCall getMulOrDivParserRuleCall_0() { return cMulOrDivParserRuleCall_0; }
		
		//(({Plus.left=current} '+' | {Minus.left=current} '-') right=MulOrDiv)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Plus.left=current} '+' | {Minus.left=current} '-'
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Plus.left=current} '+'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0_0() { return cPlusLeftAction_1_0_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }
		
		//{Minus.left=current} '-'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Minus.left=current}
		public Action getMinusLeftAction_1_0_1_0() { return cMinusLeftAction_1_0_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }
		
		//right=MulOrDiv
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//MulOrDiv
		public RuleCall getRightMulOrDivParserRuleCall_1_1_0() { return cRightMulOrDivParserRuleCall_1_1_0; }
	}
	public class MulOrDivElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.gwendal_jouneaux.rob_lang.RobLANG.MulOrDiv");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cMultiplyLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cDivideLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPrimaryParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//MulOrDiv Expression:
		//	Primary (({Multiply.left=current} '*' | {Divide.left=current} '/') right=Primary)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Primary (({Multiply.left=current} '*' | {Divide.left=current} '/') right=Primary)*
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//(({Multiply.left=current} '*' | {Divide.left=current} '/') right=Primary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Multiply.left=current} '*' | {Divide.left=current} '/'
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Multiply.left=current} '*'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Multiply.left=current}
		public Action getMultiplyLeftAction_1_0_0_0() { return cMultiplyLeftAction_1_0_0_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_0_0_1() { return cAsteriskKeyword_1_0_0_1; }
		
		//{Divide.left=current} '/'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Divide.left=current}
		public Action getDivideLeftAction_1_0_1_0() { return cDivideLeftAction_1_0_1_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1_0_1_1() { return cSolidusKeyword_1_0_1_1; }
		
		//right=Primary
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_1_0() { return cRightPrimaryParserRuleCall_1_1_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.gwendal_jouneaux.rob_lang.RobLANG.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNotAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionPrimaryParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		private final RuleCall cAtomicParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Primary Expression:
		//	'(' Expression ')' | {Not} "!" expression=Primary | Atomic;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' Expression ')' | {Not} "!" expression=Primary | Atomic
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' Expression ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//{Not} "!" expression=Primary
		public Group getGroup_1() { return cGroup_1; }
		
		//{Not}
		public Action getNotAction_1_0() { return cNotAction_1_0; }
		
		//"!"
		public Keyword getExclamationMarkKeyword_1_1() { return cExclamationMarkKeyword_1_1; }
		
		//expression=Primary
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }
		
		//Primary
		public RuleCall getExpressionPrimaryParserRuleCall_1_2_0() { return cExpressionPrimaryParserRuleCall_1_2_0; }
		
		//Atomic
		public RuleCall getAtomicParserRuleCall_2() { return cAtomicParserRuleCall_2; }
	}
	public class AtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.gwendal_jouneaux.rob_lang.RobLANG.Atomic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSensorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFunCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMathExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cArrayExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cIntConstantAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_4_1_0 = (RuleCall)cValueAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cDoubleConstantAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cValueAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cValueDOUBLETerminalRuleCall_5_1_0 = (RuleCall)cValueAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cStringConstantAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Assignment cValueAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_6_1_0 = (RuleCall)cValueAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cBoolConstantAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Assignment cValueAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final Alternatives cValueAlternatives_7_1_0 = (Alternatives)cValueAssignment_7_1.eContents().get(0);
		private final Keyword cValueTrueKeyword_7_1_0_0 = (Keyword)cValueAlternatives_7_1_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_7_1_0_1 = (Keyword)cValueAlternatives_7_1_0.eContents().get(1);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Action cSymbolRefAction_8_0 = (Action)cGroup_8.eContents().get(0);
		private final Assignment cVariableAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final CrossReference cVariableSymbolCrossReference_8_1_0 = (CrossReference)cVariableAssignment_8_1.eContents().get(0);
		private final RuleCall cVariableSymbolIDTerminalRuleCall_8_1_0_1 = (RuleCall)cVariableSymbolCrossReference_8_1_0.eContents().get(1);
		
		//Atomic Expression:
		//	Sensor | FunCall | MathExpression | ArrayExpression | {IntConstant} value=INT | {DoubleConstant} value=DOUBLE |
		//	{StringConstant} value=STRING | {BoolConstant} value=('true' | 'false') | {SymbolRef} variable=[Symbol];
		@Override public ParserRule getRule() { return rule; }
		
		//Sensor | FunCall | MathExpression | ArrayExpression | {IntConstant} value=INT | {DoubleConstant} value=DOUBLE |
		//{StringConstant} value=STRING | {BoolConstant} value=('true' | 'false') | {SymbolRef} variable=[Symbol]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Sensor
		public RuleCall getSensorParserRuleCall_0() { return cSensorParserRuleCall_0; }
		
		//FunCall
		public RuleCall getFunCallParserRuleCall_1() { return cFunCallParserRuleCall_1; }
		
		//MathExpression
		public RuleCall getMathExpressionParserRuleCall_2() { return cMathExpressionParserRuleCall_2; }
		
		//ArrayExpression
		public RuleCall getArrayExpressionParserRuleCall_3() { return cArrayExpressionParserRuleCall_3; }
		
		//{IntConstant} value=INT
		public Group getGroup_4() { return cGroup_4; }
		
		//{IntConstant}
		public Action getIntConstantAction_4_0() { return cIntConstantAction_4_0; }
		
		//value=INT
		public Assignment getValueAssignment_4_1() { return cValueAssignment_4_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_4_1_0() { return cValueINTTerminalRuleCall_4_1_0; }
		
		//{DoubleConstant} value=DOUBLE
		public Group getGroup_5() { return cGroup_5; }
		
		//{DoubleConstant}
		public Action getDoubleConstantAction_5_0() { return cDoubleConstantAction_5_0; }
		
		//value=DOUBLE
		public Assignment getValueAssignment_5_1() { return cValueAssignment_5_1; }
		
		//DOUBLE
		public RuleCall getValueDOUBLETerminalRuleCall_5_1_0() { return cValueDOUBLETerminalRuleCall_5_1_0; }
		
		//{StringConstant} value=STRING
		public Group getGroup_6() { return cGroup_6; }
		
		//{StringConstant}
		public Action getStringConstantAction_6_0() { return cStringConstantAction_6_0; }
		
		//value=STRING
		public Assignment getValueAssignment_6_1() { return cValueAssignment_6_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_6_1_0() { return cValueSTRINGTerminalRuleCall_6_1_0; }
		
		//{BoolConstant} value=('true' | 'false')
		public Group getGroup_7() { return cGroup_7; }
		
		//{BoolConstant}
		public Action getBoolConstantAction_7_0() { return cBoolConstantAction_7_0; }
		
		//value=('true' | 'false')
		public Assignment getValueAssignment_7_1() { return cValueAssignment_7_1; }
		
		//('true' | 'false')
		public Alternatives getValueAlternatives_7_1_0() { return cValueAlternatives_7_1_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_7_1_0_0() { return cValueTrueKeyword_7_1_0_0; }
		
		//'false'
		public Keyword getValueFalseKeyword_7_1_0_1() { return cValueFalseKeyword_7_1_0_1; }
		
		//{SymbolRef} variable=[Symbol]
		public Group getGroup_8() { return cGroup_8; }
		
		//{SymbolRef}
		public Action getSymbolRefAction_8_0() { return cSymbolRefAction_8_0; }
		
		//variable=[Symbol]
		public Assignment getVariableAssignment_8_1() { return cVariableAssignment_8_1; }
		
		//[Symbol]
		public CrossReference getVariableSymbolCrossReference_8_1_0() { return cVariableSymbolCrossReference_8_1_0; }
		
		//ID
		public RuleCall getVariableSymbolIDTerminalRuleCall_8_1_0_1() { return cVariableSymbolIDTerminalRuleCall_8_1_0_1; }
	}
	public class ArrayExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.gwendal_jouneaux.rob_lang.RobLANG.ArrayExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cArrayNewParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cArrayLengthParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cArrayGetParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		///********************************************************************************************************************
		// *                                                 ARRAYS                                                           *
		// *******************************************************************************************************************/ ArrayExpression:
		//	ArrayNew | ArrayLength | ArrayGet;
		@Override public ParserRule getRule() { return rule; }
		
		//ArrayNew | ArrayLength | ArrayGet
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ArrayNew
		public RuleCall getArrayNewParserRuleCall_0() { return cArrayNewParserRuleCall_0; }
		
		//ArrayLength
		public RuleCall getArrayLengthParserRuleCall_1() { return cArrayLengthParserRuleCall_1; }
		
		//ArrayGet
		public RuleCall getArrayGetParserRuleCall_2() { return cArrayGetParserRuleCall_2; }
	}
	public class ArrayStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.gwendal_jouneaux.rob_lang.RobLANG.ArrayStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cArraySetParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cArrayAddParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cArrayRemoveParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ArrayStatement:
		//	ArraySet | ArrayAdd | ArrayRemove;
		@Override public ParserRule getRule() { return rule; }
		
		//ArraySet | ArrayAdd | ArrayRemove
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ArraySet
		public RuleCall getArraySetParserRuleCall_0() { return cArraySetParserRuleCall_0; }
		
		//ArrayAdd
		public RuleCall getArrayAddParserRuleCall_1() { return cArrayAddParserRuleCall_1; }
		
		//ArrayRemove
		public RuleCall getArrayRemoveParserRuleCall_2() { return cArrayRemoveParserRuleCall_2; }
	}
	public class ArrayNewElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.gwendal_jouneaux.rob_lang.RobLANG.ArrayNew");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArrayNewKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDimensionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDimensionINTTerminalRuleCall_1_0 = (RuleCall)cDimensionAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ArrayNew:
		//	"Array.new(" dimension=INT ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"Array.new(" dimension=INT ")"
		public Group getGroup() { return cGroup; }
		
		//"Array.new("
		public Keyword getArrayNewKeyword_0() { return cArrayNewKeyword_0; }
		
		//dimension=INT
		public Assignment getDimensionAssignment_1() { return cDimensionAssignment_1; }
		
		//INT
		public RuleCall getDimensionINTTerminalRuleCall_1_0() { return cDimensionINTTerminalRuleCall_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class ArrayLengthElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.gwendal_jouneaux.rob_lang.RobLANG.ArrayLength");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArrayLengthKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArrayAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArrayExpressionParserRuleCall_1_0 = (RuleCall)cArrayAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ArrayLength:
		//	"Array.length(" array=Expression ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"Array.length(" array=Expression ")"
		public Group getGroup() { return cGroup; }
		
		//"Array.length("
		public Keyword getArrayLengthKeyword_0() { return cArrayLengthKeyword_0; }
		
		//array=Expression
		public Assignment getArrayAssignment_1() { return cArrayAssignment_1; }
		
		//Expression
		public RuleCall getArrayExpressionParserRuleCall_1_0() { return cArrayExpressionParserRuleCall_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class ArrayGetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.gwendal_jouneaux.rob_lang.RobLANG.ArrayGet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArrayGetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArrayAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArrayExpressionParserRuleCall_1_0 = (RuleCall)cArrayAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIndexAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIndexExpressionParserRuleCall_3_0 = (RuleCall)cIndexAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ArrayGet:
		//	"Array.get(" array=Expression "," index=Expression ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"Array.get(" array=Expression "," index=Expression ")"
		public Group getGroup() { return cGroup; }
		
		//"Array.get("
		public Keyword getArrayGetKeyword_0() { return cArrayGetKeyword_0; }
		
		//array=Expression
		public Assignment getArrayAssignment_1() { return cArrayAssignment_1; }
		
		//Expression
		public RuleCall getArrayExpressionParserRuleCall_1_0() { return cArrayExpressionParserRuleCall_1_0; }
		
		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//index=Expression
		public Assignment getIndexAssignment_3() { return cIndexAssignment_3; }
		
		//Expression
		public RuleCall getIndexExpressionParserRuleCall_3_0() { return cIndexExpressionParserRuleCall_3_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ArraySetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.gwendal_jouneaux.rob_lang.RobLANG.ArraySet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArraySetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArrayAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArrayExpressionParserRuleCall_1_0 = (RuleCall)cArrayAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIndexAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIndexExpressionParserRuleCall_3_0 = (RuleCall)cIndexAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValueExpressionParserRuleCall_5_0 = (RuleCall)cValueAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ArraySet:
		//	"Array.set(" array=Expression "," index=Expression "," value=Expression ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"Array.set(" array=Expression "," index=Expression "," value=Expression ")"
		public Group getGroup() { return cGroup; }
		
		//"Array.set("
		public Keyword getArraySetKeyword_0() { return cArraySetKeyword_0; }
		
		//array=Expression
		public Assignment getArrayAssignment_1() { return cArrayAssignment_1; }
		
		//Expression
		public RuleCall getArrayExpressionParserRuleCall_1_0() { return cArrayExpressionParserRuleCall_1_0; }
		
		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//index=Expression
		public Assignment getIndexAssignment_3() { return cIndexAssignment_3; }
		
		//Expression
		public RuleCall getIndexExpressionParserRuleCall_3_0() { return cIndexExpressionParserRuleCall_3_0; }
		
		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//value=Expression
		public Assignment getValueAssignment_5() { return cValueAssignment_5; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_5_0() { return cValueExpressionParserRuleCall_5_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class ArrayAddElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.gwendal_jouneaux.rob_lang.RobLANG.ArrayAdd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArrayAddKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArrayAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArrayExpressionParserRuleCall_1_0 = (RuleCall)cArrayAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueOrIndexAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueOrIndexExpressionParserRuleCall_3_0 = (RuleCall)cValueOrIndexAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cIndexedValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cIndexedValueExpressionParserRuleCall_4_1_0 = (RuleCall)cIndexedValueAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ArrayAdd:
		//	"Array.add(" array=Expression "," valueOrIndex=Expression ("," indexedValue=Expression)? ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"Array.add(" array=Expression "," valueOrIndex=Expression ("," indexedValue=Expression)? ")"
		public Group getGroup() { return cGroup; }
		
		//"Array.add("
		public Keyword getArrayAddKeyword_0() { return cArrayAddKeyword_0; }
		
		//array=Expression
		public Assignment getArrayAssignment_1() { return cArrayAssignment_1; }
		
		//Expression
		public RuleCall getArrayExpressionParserRuleCall_1_0() { return cArrayExpressionParserRuleCall_1_0; }
		
		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//valueOrIndex=Expression
		public Assignment getValueOrIndexAssignment_3() { return cValueOrIndexAssignment_3; }
		
		//Expression
		public RuleCall getValueOrIndexExpressionParserRuleCall_3_0() { return cValueOrIndexExpressionParserRuleCall_3_0; }
		
		//("," indexedValue=Expression)?
		public Group getGroup_4() { return cGroup_4; }
		
		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//indexedValue=Expression
		public Assignment getIndexedValueAssignment_4_1() { return cIndexedValueAssignment_4_1; }
		
		//Expression
		public RuleCall getIndexedValueExpressionParserRuleCall_4_1_0() { return cIndexedValueExpressionParserRuleCall_4_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class ArrayRemoveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.gwendal_jouneaux.rob_lang.RobLANG.ArrayRemove");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArrayRemoveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArrayAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArrayExpressionParserRuleCall_1_0 = (RuleCall)cArrayAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIndexAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIndexExpressionParserRuleCall_3_0 = (RuleCall)cIndexAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ArrayRemove:
		//	"Array.remove(" array=Expression "," index=Expression ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"Array.remove(" array=Expression "," index=Expression ")"
		public Group getGroup() { return cGroup; }
		
		//"Array.remove("
		public Keyword getArrayRemoveKeyword_0() { return cArrayRemoveKeyword_0; }
		
		//array=Expression
		public Assignment getArrayAssignment_1() { return cArrayAssignment_1; }
		
		//Expression
		public RuleCall getArrayExpressionParserRuleCall_1_0() { return cArrayExpressionParserRuleCall_1_0; }
		
		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//index=Expression
		public Assignment getIndexAssignment_3() { return cIndexAssignment_3; }
		
		//Expression
		public RuleCall getIndexExpressionParserRuleCall_3_0() { return cIndexExpressionParserRuleCall_3_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class MathExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.gwendal_jouneaux.rob_lang.RobLANG.MathExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMathSqrtParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMathPowParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMathSinParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMathCosParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cMathAbsParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cMathModuloParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		///********************************************************************************************************************
		// *                                                  MATH                                                            *
		// *******************************************************************************************************************/ MathExpression:
		//	MathSqrt | MathPow | MathSin | MathCos | MathAbs | MathModulo;
		@Override public ParserRule getRule() { return rule; }
		
		//MathSqrt | MathPow | MathSin | MathCos | MathAbs | MathModulo
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MathSqrt
		public RuleCall getMathSqrtParserRuleCall_0() { return cMathSqrtParserRuleCall_0; }
		
		//MathPow
		public RuleCall getMathPowParserRuleCall_1() { return cMathPowParserRuleCall_1; }
		
		//MathSin
		public RuleCall getMathSinParserRuleCall_2() { return cMathSinParserRuleCall_2; }
		
		//MathCos
		public RuleCall getMathCosParserRuleCall_3() { return cMathCosParserRuleCall_3; }
		
		//MathAbs
		public RuleCall getMathAbsParserRuleCall_4() { return cMathAbsParserRuleCall_4; }
		
		//MathModulo
		public RuleCall getMathModuloParserRuleCall_5() { return cMathModuloParserRuleCall_5; }
	}
	public class MathSqrtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.gwendal_jouneaux.rob_lang.RobLANG.MathSqrt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMathSqrtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//MathSqrt:
		//	"Math.sqrt(" expression=Expression ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"Math.sqrt(" expression=Expression ")"
		public Group getGroup() { return cGroup; }
		
		//"Math.sqrt("
		public Keyword getMathSqrtKeyword_0() { return cMathSqrtKeyword_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class MathPowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.gwendal_jouneaux.rob_lang.RobLANG.MathPow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMathPowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueExpressionParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExponantAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExponantExpressionParserRuleCall_3_0 = (RuleCall)cExponantAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//MathPow:
		//	"Math.pow(" value=Expression "," exponant=Expression ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"Math.pow(" value=Expression "," exponant=Expression ")"
		public Group getGroup() { return cGroup; }
		
		//"Math.pow("
		public Keyword getMathPowKeyword_0() { return cMathPowKeyword_0; }
		
		//value=Expression
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_1_0() { return cValueExpressionParserRuleCall_1_0; }
		
		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//exponant=Expression
		public Assignment getExponantAssignment_3() { return cExponantAssignment_3; }
		
		//Expression
		public RuleCall getExponantExpressionParserRuleCall_3_0() { return cExponantExpressionParserRuleCall_3_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class MathSinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.gwendal_jouneaux.rob_lang.RobLANG.MathSin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMathSinKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//MathSin:
		//	"Math.sin(" expression=Expression ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"Math.sin(" expression=Expression ")"
		public Group getGroup() { return cGroup; }
		
		//"Math.sin("
		public Keyword getMathSinKeyword_0() { return cMathSinKeyword_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class MathCosElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.gwendal_jouneaux.rob_lang.RobLANG.MathCos");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMathCosKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//MathCos:
		//	"Math.cos(" expression=Expression ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"Math.cos(" expression=Expression ")"
		public Group getGroup() { return cGroup; }
		
		//"Math.cos("
		public Keyword getMathCosKeyword_0() { return cMathCosKeyword_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class MathAbsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.gwendal_jouneaux.rob_lang.RobLANG.MathAbs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMathAbsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//MathAbs:
		//	"Math.abs(" expression=Expression ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"Math.abs(" expression=Expression ")"
		public Group getGroup() { return cGroup; }
		
		//"Math.abs("
		public Keyword getMathAbsKeyword_0() { return cMathAbsKeyword_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class MathModuloElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.gwendal_jouneaux.rob_lang.RobLANG.MathModulo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMathModuloKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLhsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLhsExpressionParserRuleCall_1_0 = (RuleCall)cLhsAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRhsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRhsExpressionParserRuleCall_3_0 = (RuleCall)cRhsAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//MathModulo:
		//	"Math.modulo(" lhs=Expression "," rhs=Expression ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"Math.modulo(" lhs=Expression "," rhs=Expression ")"
		public Group getGroup() { return cGroup; }
		
		//"Math.modulo("
		public Keyword getMathModuloKeyword_0() { return cMathModuloKeyword_0; }
		
		//lhs=Expression
		public Assignment getLhsAssignment_1() { return cLhsAssignment_1; }
		
		//Expression
		public RuleCall getLhsExpressionParserRuleCall_1_0() { return cLhsExpressionParserRuleCall_1_0; }
		
		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//rhs=Expression
		public Assignment getRhsAssignment_3() { return cRhsAssignment_3; }
		
		//Expression
		public RuleCall getRhsExpressionParserRuleCall_3_0() { return cRhsExpressionParserRuleCall_3_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class EffectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.gwendal_jouneaux.rob_lang.RobLANG.Effector");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMoveParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTurnParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSpeedParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAnnotatedEffectorParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		///********************************************************************************************************************
		// *                                                ROBOTICS                                                          *
		// *******************************************************************************************************************/ Effector:
		//	Move | Turn | Speed | AnnotatedEffector;
		@Override public ParserRule getRule() { return rule; }
		
		//Move | Turn | Speed | AnnotatedEffector
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Move
		public RuleCall getMoveParserRuleCall_0() { return cMoveParserRuleCall_0; }
		
		//Turn
		public RuleCall getTurnParserRuleCall_1() { return cTurnParserRuleCall_1; }
		
		//Speed
		public RuleCall getSpeedParserRuleCall_2() { return cSpeedParserRuleCall_2; }
		
		//AnnotatedEffector
		public RuleCall getAnnotatedEffectorParserRuleCall_3() { return cAnnotatedEffectorParserRuleCall_3; }
	}
	public class MoveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.gwendal_jouneaux.rob_lang.RobLANG.Move");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMoveForwardParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMoveBackwardParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Move:
		//	MoveForward | MoveBackward;
		@Override public ParserRule getRule() { return rule; }
		
		//MoveForward | MoveBackward
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MoveForward
		public RuleCall getMoveForwardParserRuleCall_0() { return cMoveForwardParserRuleCall_0; }
		
		//MoveBackward
		public RuleCall getMoveBackwardParserRuleCall_1() { return cMoveBackwardParserRuleCall_1; }
	}
	public class MoveForwardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.gwendal_jouneaux.rob_lang.RobLANG.MoveForward");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForwardKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDistanceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDistanceExpressionParserRuleCall_1_0 = (RuleCall)cDistanceAssignment_1.eContents().get(0);
		
		//MoveForward:
		//	'Forward' distance=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//'Forward' distance=Expression
		public Group getGroup() { return cGroup; }
		
		//'Forward'
		public Keyword getForwardKeyword_0() { return cForwardKeyword_0; }
		
		//distance=Expression
		public Assignment getDistanceAssignment_1() { return cDistanceAssignment_1; }
		
		//Expression
		public RuleCall getDistanceExpressionParserRuleCall_1_0() { return cDistanceExpressionParserRuleCall_1_0; }
	}
	public class MoveBackwardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.gwendal_jouneaux.rob_lang.RobLANG.MoveBackward");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBackwardKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDistanceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDistanceExpressionParserRuleCall_1_0 = (RuleCall)cDistanceAssignment_1.eContents().get(0);
		
		//MoveBackward:
		//	'Backward' distance=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//'Backward' distance=Expression
		public Group getGroup() { return cGroup; }
		
		//'Backward'
		public Keyword getBackwardKeyword_0() { return cBackwardKeyword_0; }
		
		//distance=Expression
		public Assignment getDistanceAssignment_1() { return cDistanceAssignment_1; }
		
		//Expression
		public RuleCall getDistanceExpressionParserRuleCall_1_0() { return cDistanceExpressionParserRuleCall_1_0; }
	}
	public class TurnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.gwendal_jouneaux.rob_lang.RobLANG.Turn");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTurnLeftParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTurnRightParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Turn:
		//	TurnLeft | TurnRight;
		@Override public ParserRule getRule() { return rule; }
		
		//TurnLeft | TurnRight
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TurnLeft
		public RuleCall getTurnLeftParserRuleCall_0() { return cTurnLeftParserRuleCall_0; }
		
		//TurnRight
		public RuleCall getTurnRightParserRuleCall_1() { return cTurnRightParserRuleCall_1; }
	}
	public class TurnLeftElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.gwendal_jouneaux.rob_lang.RobLANG.TurnLeft");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAngleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAngleExpressionParserRuleCall_1_0 = (RuleCall)cAngleAssignment_1.eContents().get(0);
		
		//TurnLeft:
		//	'Left' angle=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//'Left' angle=Expression
		public Group getGroup() { return cGroup; }
		
		//'Left'
		public Keyword getLeftKeyword_0() { return cLeftKeyword_0; }
		
		//angle=Expression
		public Assignment getAngleAssignment_1() { return cAngleAssignment_1; }
		
		//Expression
		public RuleCall getAngleExpressionParserRuleCall_1_0() { return cAngleExpressionParserRuleCall_1_0; }
	}
	public class TurnRightElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.gwendal_jouneaux.rob_lang.RobLANG.TurnRight");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRightKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAngleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAngleExpressionParserRuleCall_1_0 = (RuleCall)cAngleAssignment_1.eContents().get(0);
		
		//TurnRight:
		//	'Right' angle=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//'Right' angle=Expression
		public Group getGroup() { return cGroup; }
		
		//'Right'
		public Keyword getRightKeyword_0() { return cRightKeyword_0; }
		
		//angle=Expression
		public Assignment getAngleAssignment_1() { return cAngleAssignment_1; }
		
		//Expression
		public RuleCall getAngleExpressionParserRuleCall_1_0() { return cAngleExpressionParserRuleCall_1_0; }
	}
	public class SpeedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.gwendal_jouneaux.rob_lang.RobLANG.Speed");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSetNominalSpeedParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGetMaxSpeedParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Speed:
		//	SetNominalSpeed | GetMaxSpeed;
		@Override public ParserRule getRule() { return rule; }
		
		//SetNominalSpeed | GetMaxSpeed
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SetNominalSpeed
		public RuleCall getSetNominalSpeedParserRuleCall_0() { return cSetNominalSpeedParserRuleCall_0; }
		
		//GetMaxSpeed
		public RuleCall getGetMaxSpeedParserRuleCall_1() { return cGetMaxSpeedParserRuleCall_1; }
	}
	public class SetNominalSpeedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.gwendal_jouneaux.rob_lang.RobLANG.SetNominalSpeed");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetNominalSpeedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSpeedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSpeedExpressionParserRuleCall_2_0 = (RuleCall)cSpeedAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SetNominalSpeed:
		//	"setNominalSpeed" "(" speed=Expression ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"setNominalSpeed" "(" speed=Expression ")"
		public Group getGroup() { return cGroup; }
		
		//"setNominalSpeed"
		public Keyword getSetNominalSpeedKeyword_0() { return cSetNominalSpeedKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//speed=Expression
		public Assignment getSpeedAssignment_2() { return cSpeedAssignment_2; }
		
		//Expression
		public RuleCall getSpeedExpressionParserRuleCall_2_0() { return cSpeedExpressionParserRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class GetMaxSpeedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.gwendal_jouneaux.rob_lang.RobLANG.GetMaxSpeed");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGetMaxSpeedAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSetNominalSpeedKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//GetMaxSpeed:
		//	{GetMaxSpeed} "setNominalSpeed" "(" ")";
		@Override public ParserRule getRule() { return rule; }
		
		//{GetMaxSpeed} "setNominalSpeed" "(" ")"
		public Group getGroup() { return cGroup; }
		
		//{GetMaxSpeed}
		public Action getGetMaxSpeedAction_0() { return cGetMaxSpeedAction_0; }
		
		//"setNominalSpeed"
		public Keyword getSetNominalSpeedKeyword_1() { return cSetNominalSpeedKeyword_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class SensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.gwendal_jouneaux.rob_lang.RobLANG.Sensor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSenseTimeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSenseBatteryParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSensePositionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSenseDistanceParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSenseCompassParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Sensor:
		//	SenseTime | SenseBattery | SensePosition | SenseDistance | SenseCompass;
		@Override public ParserRule getRule() { return rule; }
		
		//SenseTime | SenseBattery | SensePosition | SenseDistance | SenseCompass
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SenseTime
		public RuleCall getSenseTimeParserRuleCall_0() { return cSenseTimeParserRuleCall_0; }
		
		//SenseBattery
		public RuleCall getSenseBatteryParserRuleCall_1() { return cSenseBatteryParserRuleCall_1; }
		
		//SensePosition
		public RuleCall getSensePositionParserRuleCall_2() { return cSensePositionParserRuleCall_2; }
		
		//SenseDistance
		public RuleCall getSenseDistanceParserRuleCall_3() { return cSenseDistanceParserRuleCall_3; }
		
		//SenseCompass
		public RuleCall getSenseCompassParserRuleCall_4() { return cSenseCompassParserRuleCall_4; }
	}
	public class SenseTimeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.gwendal_jouneaux.rob_lang.RobLANG.SenseTime");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSenseTimeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGetTimestampKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SenseTime:
		//	{SenseTime} "getTimestamp" "(" ")";
		@Override public ParserRule getRule() { return rule; }
		
		//{SenseTime} "getTimestamp" "(" ")"
		public Group getGroup() { return cGroup; }
		
		//{SenseTime}
		public Action getSenseTimeAction_0() { return cSenseTimeAction_0; }
		
		//"getTimestamp"
		public Keyword getGetTimestampKeyword_1() { return cGetTimestampKeyword_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class SenseBatteryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.gwendal_jouneaux.rob_lang.RobLANG.SenseBattery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSenseBatteryAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGetBatteryLevelKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SenseBattery:
		//	{SenseBattery} "getBatteryLevel" "(" ")";
		@Override public ParserRule getRule() { return rule; }
		
		//{SenseBattery} "getBatteryLevel" "(" ")"
		public Group getGroup() { return cGroup; }
		
		//{SenseBattery}
		public Action getSenseBatteryAction_0() { return cSenseBatteryAction_0; }
		
		//"getBatteryLevel"
		public Keyword getGetBatteryLevelKeyword_1() { return cGetBatteryLevelKeyword_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class SensePositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.gwendal_jouneaux.rob_lang.RobLANG.SensePosition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSensePositionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGetPositionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SensePosition:
		//	{SensePosition} "getPosition" "(" ")";
		@Override public ParserRule getRule() { return rule; }
		
		//{SensePosition} "getPosition" "(" ")"
		public Group getGroup() { return cGroup; }
		
		//{SensePosition}
		public Action getSensePositionAction_0() { return cSensePositionAction_0; }
		
		//"getPosition"
		public Keyword getGetPositionKeyword_1() { return cGetPositionKeyword_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class SenseDistanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.gwendal_jouneaux.rob_lang.RobLANG.SenseDistance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSenseDistanceAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGetDistanceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSensorIndexAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSensorIndexINTTerminalRuleCall_3_0 = (RuleCall)cSensorIndexAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SenseDistance:
		//	{SenseDistance} "getDistance" "(" sensorIndex=INT ")";
		@Override public ParserRule getRule() { return rule; }
		
		//{SenseDistance} "getDistance" "(" sensorIndex=INT ")"
		public Group getGroup() { return cGroup; }
		
		//{SenseDistance}
		public Action getSenseDistanceAction_0() { return cSenseDistanceAction_0; }
		
		//"getDistance"
		public Keyword getGetDistanceKeyword_1() { return cGetDistanceKeyword_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//sensorIndex=INT
		public Assignment getSensorIndexAssignment_3() { return cSensorIndexAssignment_3; }
		
		//INT
		public RuleCall getSensorIndexINTTerminalRuleCall_3_0() { return cSensorIndexINTTerminalRuleCall_3_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class SenseCompassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.gwendal_jouneaux.rob_lang.RobLANG.SenseCompass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSenseCompassAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGetCompassAngleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SenseCompass:
		//	{SenseCompass} "getCompassAngle" "(" ")";
		@Override public ParserRule getRule() { return rule; }
		
		//{SenseCompass} "getCompassAngle" "(" ")"
		public Group getGroup() { return cGroup; }
		
		//{SenseCompass}
		public Action getSenseCompassAction_0() { return cSenseCompassAction_0; }
		
		//"getCompassAngle"
		public Keyword getGetCompassAngleKeyword_1() { return cGetCompassAngleKeyword_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class AnnotatedEffectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.gwendal_jouneaux.rob_lang.RobLANG.AnnotatedEffector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPropertyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPropertyAdaptationPropertyEnumRuleCall_1_0 = (RuleCall)cPropertyAssignment_1.eContents().get(0);
		private final Assignment cLowerBoundAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLowerBoundExpressionParserRuleCall_2_0 = (RuleCall)cLowerBoundAssignment_2.eContents().get(0);
		private final Assignment cHigherBoundAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cHigherBoundExpressionParserRuleCall_3_0 = (RuleCall)cHigherBoundAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cStatementAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Alternatives cStatementAlternatives_5_0 = (Alternatives)cStatementAssignment_5.eContents().get(0);
		private final RuleCall cStatementMoveForwardParserRuleCall_5_0_0 = (RuleCall)cStatementAlternatives_5_0.eContents().get(0);
		private final RuleCall cStatementMoveBackwardParserRuleCall_5_0_1 = (RuleCall)cStatementAlternatives_5_0.eContents().get(1);
		private final RuleCall cStatementTurnLeftParserRuleCall_5_0_2 = (RuleCall)cStatementAlternatives_5_0.eContents().get(2);
		private final RuleCall cStatementTurnRightParserRuleCall_5_0_3 = (RuleCall)cStatementAlternatives_5_0.eContents().get(3);
		
		///********************************************************************************************************************
		// *                                               ADAPTATION                                                         *
		// *******************************************************************************************************************/ AnnotatedEffector:
		//	"[" property=AdaptationProperty lowerBound=Expression higherBound=Expression "]" statement=(MoveForward | MoveBackward
		//	| TurnLeft | TurnRight);
		@Override public ParserRule getRule() { return rule; }
		
		//"[" property=AdaptationProperty lowerBound=Expression higherBound=Expression "]" statement=(MoveForward | MoveBackward |
		//TurnLeft | TurnRight)
		public Group getGroup() { return cGroup; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//property=AdaptationProperty
		public Assignment getPropertyAssignment_1() { return cPropertyAssignment_1; }
		
		//AdaptationProperty
		public RuleCall getPropertyAdaptationPropertyEnumRuleCall_1_0() { return cPropertyAdaptationPropertyEnumRuleCall_1_0; }
		
		//lowerBound=Expression
		public Assignment getLowerBoundAssignment_2() { return cLowerBoundAssignment_2; }
		
		//Expression
		public RuleCall getLowerBoundExpressionParserRuleCall_2_0() { return cLowerBoundExpressionParserRuleCall_2_0; }
		
		//higherBound=Expression
		public Assignment getHigherBoundAssignment_3() { return cHigherBoundAssignment_3; }
		
		//Expression
		public RuleCall getHigherBoundExpressionParserRuleCall_3_0() { return cHigherBoundExpressionParserRuleCall_3_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
		
		//statement=(MoveForward | MoveBackward | TurnLeft | TurnRight)
		public Assignment getStatementAssignment_5() { return cStatementAssignment_5; }
		
		//(MoveForward | MoveBackward | TurnLeft | TurnRight)
		public Alternatives getStatementAlternatives_5_0() { return cStatementAlternatives_5_0; }
		
		//MoveForward
		public RuleCall getStatementMoveForwardParserRuleCall_5_0_0() { return cStatementMoveForwardParserRuleCall_5_0_0; }
		
		//MoveBackward
		public RuleCall getStatementMoveBackwardParserRuleCall_5_0_1() { return cStatementMoveBackwardParserRuleCall_5_0_1; }
		
		//TurnLeft
		public RuleCall getStatementTurnLeftParserRuleCall_5_0_2() { return cStatementTurnLeftParserRuleCall_5_0_2; }
		
		//TurnRight
		public RuleCall getStatementTurnRightParserRuleCall_5_0_3() { return cStatementTurnRightParserRuleCall_5_0_3; }
	}
	
	public class BasicTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "fr.gwendal_jouneaux.rob_lang.RobLANG.BasicType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSTRINGEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSTRINGStringKeyword_0_0 = (Keyword)cSTRINGEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBOOLEANEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBOOLEANBoolKeyword_1_0 = (Keyword)cBOOLEANEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cINTEGEREnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cINTEGERIntKeyword_2_0 = (Keyword)cINTEGEREnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDOUBLEEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDOUBLEDoubleKeyword_3_0 = (Keyword)cDOUBLEEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cVOIDEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cVOIDVoidKeyword_4_0 = (Keyword)cVOIDEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum BasicType:
		//	STRING="String" | BOOLEAN="bool" | INTEGER="int" | DOUBLE="double" | VOID="void";
		public EnumRule getRule() { return rule; }
		
		//STRING="String" | BOOLEAN="bool" | INTEGER="int" | DOUBLE="double" | VOID="void"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING="String"
		public EnumLiteralDeclaration getSTRINGEnumLiteralDeclaration_0() { return cSTRINGEnumLiteralDeclaration_0; }
		
		//"String"
		public Keyword getSTRINGStringKeyword_0_0() { return cSTRINGStringKeyword_0_0; }
		
		//BOOLEAN="bool"
		public EnumLiteralDeclaration getBOOLEANEnumLiteralDeclaration_1() { return cBOOLEANEnumLiteralDeclaration_1; }
		
		//"bool"
		public Keyword getBOOLEANBoolKeyword_1_0() { return cBOOLEANBoolKeyword_1_0; }
		
		//INTEGER="int"
		public EnumLiteralDeclaration getINTEGEREnumLiteralDeclaration_2() { return cINTEGEREnumLiteralDeclaration_2; }
		
		//"int"
		public Keyword getINTEGERIntKeyword_2_0() { return cINTEGERIntKeyword_2_0; }
		
		//DOUBLE="double"
		public EnumLiteralDeclaration getDOUBLEEnumLiteralDeclaration_3() { return cDOUBLEEnumLiteralDeclaration_3; }
		
		//"double"
		public Keyword getDOUBLEDoubleKeyword_3_0() { return cDOUBLEDoubleKeyword_3_0; }
		
		//VOID="void"
		public EnumLiteralDeclaration getVOIDEnumLiteralDeclaration_4() { return cVOIDEnumLiteralDeclaration_4; }
		
		//"void"
		public Keyword getVOIDVoidKeyword_4_0() { return cVOIDVoidKeyword_4_0; }
	}
	public class AdaptationPropertyElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "fr.gwendal_jouneaux.rob_lang.RobLANG.AdaptationProperty");
		private final EnumLiteralDeclaration cSPEEDEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cSPEEDSpeedKeyword_0 = (Keyword)cSPEEDEnumLiteralDeclaration.eContents().get(0);
		
		//enum AdaptationProperty:
		//	SPEED="Speed";
		public EnumRule getRule() { return rule; }
		
		//SPEED="Speed"
		public EnumLiteralDeclaration getSPEEDEnumLiteralDeclaration() { return cSPEEDEnumLiteralDeclaration; }
		
		//"Speed"
		public Keyword getSPEEDSpeedKeyword_0() { return cSPEEDSpeedKeyword_0; }
	}
	
	private final RobotElements pRobot;
	private final BlockElements pBlock;
	private final TypeElements pType;
	private final SymbolElements pSymbol;
	private final FunDefinitionElements pFunDefinition;
	private final InlineFunctionElements pInlineFunction;
	private final ComplexFunctionElements pComplexFunction;
	private final ParameterElements pParameter;
	private final FunParamElements pFunParam;
	private final FunCallElements pFunCall;
	private final StatementElements pStatement;
	private final VariableElements pVariable;
	private final AssignmentElements pAssignment;
	private final PrintExpressionElements pPrintExpression;
	private final LoopElements pLoop;
	private final ConditionElements pCondition;
	private final ReturnElements pReturn;
	private final BreakElements pBreak;
	private final ExpressionElements pExpression;
	private final OrElements pOr;
	private final AndElements pAnd;
	private final EqualityElements pEquality;
	private final ComparisonElements pComparison;
	private final PlusOrMinusElements pPlusOrMinus;
	private final MulOrDivElements pMulOrDiv;
	private final PrimaryElements pPrimary;
	private final AtomicElements pAtomic;
	private final ArrayExpressionElements pArrayExpression;
	private final ArrayStatementElements pArrayStatement;
	private final ArrayNewElements pArrayNew;
	private final ArrayLengthElements pArrayLength;
	private final ArrayGetElements pArrayGet;
	private final ArraySetElements pArraySet;
	private final ArrayAddElements pArrayAdd;
	private final ArrayRemoveElements pArrayRemove;
	private final MathExpressionElements pMathExpression;
	private final MathSqrtElements pMathSqrt;
	private final MathPowElements pMathPow;
	private final MathSinElements pMathSin;
	private final MathCosElements pMathCos;
	private final MathAbsElements pMathAbs;
	private final MathModuloElements pMathModulo;
	private final EffectorElements pEffector;
	private final MoveElements pMove;
	private final MoveForwardElements pMoveForward;
	private final MoveBackwardElements pMoveBackward;
	private final TurnElements pTurn;
	private final TurnLeftElements pTurnLeft;
	private final TurnRightElements pTurnRight;
	private final SpeedElements pSpeed;
	private final SetNominalSpeedElements pSetNominalSpeed;
	private final GetMaxSpeedElements pGetMaxSpeed;
	private final SensorElements pSensor;
	private final SenseTimeElements pSenseTime;
	private final SenseBatteryElements pSenseBattery;
	private final SensePositionElements pSensePosition;
	private final SenseDistanceElements pSenseDistance;
	private final SenseCompassElements pSenseCompass;
	private final AnnotatedEffectorElements pAnnotatedEffector;
	private final TerminalRule tDOUBLE;
	private final BasicTypeElements eBasicType;
	private final AdaptationPropertyElements eAdaptationProperty;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public RobLANGGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRobot = new RobotElements();
		this.pBlock = new BlockElements();
		this.pType = new TypeElements();
		this.pSymbol = new SymbolElements();
		this.pFunDefinition = new FunDefinitionElements();
		this.pInlineFunction = new InlineFunctionElements();
		this.pComplexFunction = new ComplexFunctionElements();
		this.pParameter = new ParameterElements();
		this.pFunParam = new FunParamElements();
		this.pFunCall = new FunCallElements();
		this.pStatement = new StatementElements();
		this.pVariable = new VariableElements();
		this.pAssignment = new AssignmentElements();
		this.pPrintExpression = new PrintExpressionElements();
		this.pLoop = new LoopElements();
		this.pCondition = new ConditionElements();
		this.pReturn = new ReturnElements();
		this.pBreak = new BreakElements();
		this.pExpression = new ExpressionElements();
		this.pOr = new OrElements();
		this.pAnd = new AndElements();
		this.pEquality = new EqualityElements();
		this.pComparison = new ComparisonElements();
		this.pPlusOrMinus = new PlusOrMinusElements();
		this.pMulOrDiv = new MulOrDivElements();
		this.pPrimary = new PrimaryElements();
		this.pAtomic = new AtomicElements();
		this.pArrayExpression = new ArrayExpressionElements();
		this.pArrayStatement = new ArrayStatementElements();
		this.pArrayNew = new ArrayNewElements();
		this.pArrayLength = new ArrayLengthElements();
		this.pArrayGet = new ArrayGetElements();
		this.pArraySet = new ArraySetElements();
		this.pArrayAdd = new ArrayAddElements();
		this.pArrayRemove = new ArrayRemoveElements();
		this.pMathExpression = new MathExpressionElements();
		this.pMathSqrt = new MathSqrtElements();
		this.pMathPow = new MathPowElements();
		this.pMathSin = new MathSinElements();
		this.pMathCos = new MathCosElements();
		this.pMathAbs = new MathAbsElements();
		this.pMathModulo = new MathModuloElements();
		this.pEffector = new EffectorElements();
		this.pMove = new MoveElements();
		this.pMoveForward = new MoveForwardElements();
		this.pMoveBackward = new MoveBackwardElements();
		this.pTurn = new TurnElements();
		this.pTurnLeft = new TurnLeftElements();
		this.pTurnRight = new TurnRightElements();
		this.pSpeed = new SpeedElements();
		this.pSetNominalSpeed = new SetNominalSpeedElements();
		this.pGetMaxSpeed = new GetMaxSpeedElements();
		this.pSensor = new SensorElements();
		this.pSenseTime = new SenseTimeElements();
		this.pSenseBattery = new SenseBatteryElements();
		this.pSensePosition = new SensePositionElements();
		this.pSenseDistance = new SenseDistanceElements();
		this.pSenseCompass = new SenseCompassElements();
		this.pAnnotatedEffector = new AnnotatedEffectorElements();
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "fr.gwendal_jouneaux.rob_lang.RobLANG.DOUBLE");
		this.eBasicType = new BasicTypeElements();
		this.eAdaptationProperty = new AdaptationPropertyElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.gwendal_jouneaux.rob_lang.RobLANG".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Robot:
	//	'Robot' name=ID '{' functions+=FunDefinition+ '}';
	public RobotElements getRobotAccess() {
		return pRobot;
	}
	
	public ParserRule getRobotRule() {
		return getRobotAccess().getRule();
	}
	
	///********************************************************************************************************************
	// *                                                 UTILS                                                            *
	// *******************************************************************************************************************/ Block:
	//	{Block} '{' statements+=Statement* '}';
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	//Type:
	//	type=BasicType ("[" dimension=INT "]")?;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//Symbol:
	//	Variable | Parameter;
	public SymbolElements getSymbolAccess() {
		return pSymbol;
	}
	
	public ParserRule getSymbolRule() {
		return getSymbolAccess().getRule();
	}
	
	///********************************************************************************************************************
	// *                                               FUNCTIONS                                                          *
	// *******************************************************************************************************************/ FunDefinition:
	//	InlineFunction | ComplexFunction;
	public FunDefinitionElements getFunDefinitionAccess() {
		return pFunDefinition;
	}
	
	public ParserRule getFunDefinitionRule() {
		return getFunDefinitionAccess().getRule();
	}
	
	//InlineFunction:
	//	'let' type=Type name=ID '(' (varNames+=Parameter (',' varNames+=Parameter)*)? ')' '=>' expression=Expression;
	public InlineFunctionElements getInlineFunctionAccess() {
		return pInlineFunction;
	}
	
	public ParserRule getInlineFunctionRule() {
		return getInlineFunctionAccess().getRule();
	}
	
	//ComplexFunction:
	//	'let' type=Type name=ID '(' (varNames+=Parameter (',' varNames+=Parameter)*)? ')' body=Block;
	public ComplexFunctionElements getComplexFunctionAccess() {
		return pComplexFunction;
	}
	
	public ParserRule getComplexFunctionRule() {
		return getComplexFunctionAccess().getRule();
	}
	
	//Parameter:
	//	type=Type name=ID;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//FunParam:
	//	{FunParamExp} expr=Expression | {FunParamCapture} ':' variable=[Variable];
	public FunParamElements getFunParamAccess() {
		return pFunParam;
	}
	
	public ParserRule getFunParamRule() {
		return getFunParamAccess().getRule();
	}
	
	//FunCall:
	//	function=[FunDefinition] '(' (params+=FunParam (',' params+=FunParam)*)? ')';
	public FunCallElements getFunCallAccess() {
		return pFunCall;
	}
	
	public ParserRule getFunCallRule() {
		return getFunCallAccess().getRule();
	}
	
	///********************************************************************************************************************
	// *                                               STATEMENTS                                                         *
	// *******************************************************************************************************************/ Statement:
	//	Variable | Assignment | PrintExpression | Loop | Condition | Effector | ArrayStatement | Return | Break | Expression;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//Variable:
	//	'var' type=Type name=ID '=' expression=Expression;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//Assignment:
	//	assignee=[Symbol] '=' expression=Expression;
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	//PrintExpression:
	//	'print' expression=Expression;
	public PrintExpressionElements getPrintExpressionAccess() {
		return pPrintExpression;
	}
	
	public ParserRule getPrintExpressionRule() {
		return getPrintExpressionAccess().getRule();
	}
	
	//Loop:
	//	'loop' expression=Expression body=Block;
	public LoopElements getLoopAccess() {
		return pLoop;
	}
	
	public ParserRule getLoopRule() {
		return getLoopAccess().getRule();
	}
	
	//Condition:
	//	'if' expression=Expression ifz=Block ('else' elsez=Block)?;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//Return:
	//	"return" expression=Expression;
	public ReturnElements getReturnAccess() {
		return pReturn;
	}
	
	public ParserRule getReturnRule() {
		return getReturnAccess().getRule();
	}
	
	//Break:
	//	{Break} "break";
	public BreakElements getBreakAccess() {
		return pBreak;
	}
	
	public ParserRule getBreakRule() {
		return getBreakAccess().getRule();
	}
	
	///********************************************************************************************************************
	// *                                               EXPRESSION                                                         *
	// *******************************************************************************************************************/ Expression:
	//	Or;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Or Expression:
	//	And ({Or.left=current} "||" right=And)*;
	public OrElements getOrAccess() {
		return pOr;
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}
	
	//And Expression:
	//	Equality ({And.left=current} "&&" right=Equality)*;
	public AndElements getAndAccess() {
		return pAnd;
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}
	
	//Equality Expression:
	//	Comparison (({Equality.left=current} '==' | {Inequality.left=current} '!=') right=Comparison)*;
	public EqualityElements getEqualityAccess() {
		return pEquality;
	}
	
	public ParserRule getEqualityRule() {
		return getEqualityAccess().getRule();
	}
	
	//Comparison Expression:
	//	PlusOrMinus (({GreaterEq.left=current} ">=" | {LessEq.left=current} "<=" | {Greater.left=current} '>' |
	//	{Less.left=current} "<") right=PlusOrMinus)*;
	public ComparisonElements getComparisonAccess() {
		return pComparison;
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}
	
	//PlusOrMinus Expression:
	//	MulOrDiv (({Plus.left=current} '+' | {Minus.left=current} '-') right=MulOrDiv)*;
	public PlusOrMinusElements getPlusOrMinusAccess() {
		return pPlusOrMinus;
	}
	
	public ParserRule getPlusOrMinusRule() {
		return getPlusOrMinusAccess().getRule();
	}
	
	//MulOrDiv Expression:
	//	Primary (({Multiply.left=current} '*' | {Divide.left=current} '/') right=Primary)*;
	public MulOrDivElements getMulOrDivAccess() {
		return pMulOrDiv;
	}
	
	public ParserRule getMulOrDivRule() {
		return getMulOrDivAccess().getRule();
	}
	
	//Primary Expression:
	//	'(' Expression ')' | {Not} "!" expression=Primary | Atomic;
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//Atomic Expression:
	//	Sensor | FunCall | MathExpression | ArrayExpression | {IntConstant} value=INT | {DoubleConstant} value=DOUBLE |
	//	{StringConstant} value=STRING | {BoolConstant} value=('true' | 'false') | {SymbolRef} variable=[Symbol];
	public AtomicElements getAtomicAccess() {
		return pAtomic;
	}
	
	public ParserRule getAtomicRule() {
		return getAtomicAccess().getRule();
	}
	
	///********************************************************************************************************************
	// *                                                 ARRAYS                                                           *
	// *******************************************************************************************************************/ ArrayExpression:
	//	ArrayNew | ArrayLength | ArrayGet;
	public ArrayExpressionElements getArrayExpressionAccess() {
		return pArrayExpression;
	}
	
	public ParserRule getArrayExpressionRule() {
		return getArrayExpressionAccess().getRule();
	}
	
	//ArrayStatement:
	//	ArraySet | ArrayAdd | ArrayRemove;
	public ArrayStatementElements getArrayStatementAccess() {
		return pArrayStatement;
	}
	
	public ParserRule getArrayStatementRule() {
		return getArrayStatementAccess().getRule();
	}
	
	//ArrayNew:
	//	"Array.new(" dimension=INT ")";
	public ArrayNewElements getArrayNewAccess() {
		return pArrayNew;
	}
	
	public ParserRule getArrayNewRule() {
		return getArrayNewAccess().getRule();
	}
	
	//ArrayLength:
	//	"Array.length(" array=Expression ")";
	public ArrayLengthElements getArrayLengthAccess() {
		return pArrayLength;
	}
	
	public ParserRule getArrayLengthRule() {
		return getArrayLengthAccess().getRule();
	}
	
	//ArrayGet:
	//	"Array.get(" array=Expression "," index=Expression ")";
	public ArrayGetElements getArrayGetAccess() {
		return pArrayGet;
	}
	
	public ParserRule getArrayGetRule() {
		return getArrayGetAccess().getRule();
	}
	
	//ArraySet:
	//	"Array.set(" array=Expression "," index=Expression "," value=Expression ")";
	public ArraySetElements getArraySetAccess() {
		return pArraySet;
	}
	
	public ParserRule getArraySetRule() {
		return getArraySetAccess().getRule();
	}
	
	//ArrayAdd:
	//	"Array.add(" array=Expression "," valueOrIndex=Expression ("," indexedValue=Expression)? ")";
	public ArrayAddElements getArrayAddAccess() {
		return pArrayAdd;
	}
	
	public ParserRule getArrayAddRule() {
		return getArrayAddAccess().getRule();
	}
	
	//ArrayRemove:
	//	"Array.remove(" array=Expression "," index=Expression ")";
	public ArrayRemoveElements getArrayRemoveAccess() {
		return pArrayRemove;
	}
	
	public ParserRule getArrayRemoveRule() {
		return getArrayRemoveAccess().getRule();
	}
	
	///********************************************************************************************************************
	// *                                                  MATH                                                            *
	// *******************************************************************************************************************/ MathExpression:
	//	MathSqrt | MathPow | MathSin | MathCos | MathAbs | MathModulo;
	public MathExpressionElements getMathExpressionAccess() {
		return pMathExpression;
	}
	
	public ParserRule getMathExpressionRule() {
		return getMathExpressionAccess().getRule();
	}
	
	//MathSqrt:
	//	"Math.sqrt(" expression=Expression ")";
	public MathSqrtElements getMathSqrtAccess() {
		return pMathSqrt;
	}
	
	public ParserRule getMathSqrtRule() {
		return getMathSqrtAccess().getRule();
	}
	
	//MathPow:
	//	"Math.pow(" value=Expression "," exponant=Expression ")";
	public MathPowElements getMathPowAccess() {
		return pMathPow;
	}
	
	public ParserRule getMathPowRule() {
		return getMathPowAccess().getRule();
	}
	
	//MathSin:
	//	"Math.sin(" expression=Expression ")";
	public MathSinElements getMathSinAccess() {
		return pMathSin;
	}
	
	public ParserRule getMathSinRule() {
		return getMathSinAccess().getRule();
	}
	
	//MathCos:
	//	"Math.cos(" expression=Expression ")";
	public MathCosElements getMathCosAccess() {
		return pMathCos;
	}
	
	public ParserRule getMathCosRule() {
		return getMathCosAccess().getRule();
	}
	
	//MathAbs:
	//	"Math.abs(" expression=Expression ")";
	public MathAbsElements getMathAbsAccess() {
		return pMathAbs;
	}
	
	public ParserRule getMathAbsRule() {
		return getMathAbsAccess().getRule();
	}
	
	//MathModulo:
	//	"Math.modulo(" lhs=Expression "," rhs=Expression ")";
	public MathModuloElements getMathModuloAccess() {
		return pMathModulo;
	}
	
	public ParserRule getMathModuloRule() {
		return getMathModuloAccess().getRule();
	}
	
	///********************************************************************************************************************
	// *                                                ROBOTICS                                                          *
	// *******************************************************************************************************************/ Effector:
	//	Move | Turn | Speed | AnnotatedEffector;
	public EffectorElements getEffectorAccess() {
		return pEffector;
	}
	
	public ParserRule getEffectorRule() {
		return getEffectorAccess().getRule();
	}
	
	//Move:
	//	MoveForward | MoveBackward;
	public MoveElements getMoveAccess() {
		return pMove;
	}
	
	public ParserRule getMoveRule() {
		return getMoveAccess().getRule();
	}
	
	//MoveForward:
	//	'Forward' distance=Expression;
	public MoveForwardElements getMoveForwardAccess() {
		return pMoveForward;
	}
	
	public ParserRule getMoveForwardRule() {
		return getMoveForwardAccess().getRule();
	}
	
	//MoveBackward:
	//	'Backward' distance=Expression;
	public MoveBackwardElements getMoveBackwardAccess() {
		return pMoveBackward;
	}
	
	public ParserRule getMoveBackwardRule() {
		return getMoveBackwardAccess().getRule();
	}
	
	//Turn:
	//	TurnLeft | TurnRight;
	public TurnElements getTurnAccess() {
		return pTurn;
	}
	
	public ParserRule getTurnRule() {
		return getTurnAccess().getRule();
	}
	
	//TurnLeft:
	//	'Left' angle=Expression;
	public TurnLeftElements getTurnLeftAccess() {
		return pTurnLeft;
	}
	
	public ParserRule getTurnLeftRule() {
		return getTurnLeftAccess().getRule();
	}
	
	//TurnRight:
	//	'Right' angle=Expression;
	public TurnRightElements getTurnRightAccess() {
		return pTurnRight;
	}
	
	public ParserRule getTurnRightRule() {
		return getTurnRightAccess().getRule();
	}
	
	//Speed:
	//	SetNominalSpeed | GetMaxSpeed;
	public SpeedElements getSpeedAccess() {
		return pSpeed;
	}
	
	public ParserRule getSpeedRule() {
		return getSpeedAccess().getRule();
	}
	
	//SetNominalSpeed:
	//	"setNominalSpeed" "(" speed=Expression ")";
	public SetNominalSpeedElements getSetNominalSpeedAccess() {
		return pSetNominalSpeed;
	}
	
	public ParserRule getSetNominalSpeedRule() {
		return getSetNominalSpeedAccess().getRule();
	}
	
	//GetMaxSpeed:
	//	{GetMaxSpeed} "setNominalSpeed" "(" ")";
	public GetMaxSpeedElements getGetMaxSpeedAccess() {
		return pGetMaxSpeed;
	}
	
	public ParserRule getGetMaxSpeedRule() {
		return getGetMaxSpeedAccess().getRule();
	}
	
	//Sensor:
	//	SenseTime | SenseBattery | SensePosition | SenseDistance | SenseCompass;
	public SensorElements getSensorAccess() {
		return pSensor;
	}
	
	public ParserRule getSensorRule() {
		return getSensorAccess().getRule();
	}
	
	//SenseTime:
	//	{SenseTime} "getTimestamp" "(" ")";
	public SenseTimeElements getSenseTimeAccess() {
		return pSenseTime;
	}
	
	public ParserRule getSenseTimeRule() {
		return getSenseTimeAccess().getRule();
	}
	
	//SenseBattery:
	//	{SenseBattery} "getBatteryLevel" "(" ")";
	public SenseBatteryElements getSenseBatteryAccess() {
		return pSenseBattery;
	}
	
	public ParserRule getSenseBatteryRule() {
		return getSenseBatteryAccess().getRule();
	}
	
	//SensePosition:
	//	{SensePosition} "getPosition" "(" ")";
	public SensePositionElements getSensePositionAccess() {
		return pSensePosition;
	}
	
	public ParserRule getSensePositionRule() {
		return getSensePositionAccess().getRule();
	}
	
	//SenseDistance:
	//	{SenseDistance} "getDistance" "(" sensorIndex=INT ")";
	public SenseDistanceElements getSenseDistanceAccess() {
		return pSenseDistance;
	}
	
	public ParserRule getSenseDistanceRule() {
		return getSenseDistanceAccess().getRule();
	}
	
	//SenseCompass:
	//	{SenseCompass} "getCompassAngle" "(" ")";
	public SenseCompassElements getSenseCompassAccess() {
		return pSenseCompass;
	}
	
	public ParserRule getSenseCompassRule() {
		return getSenseCompassAccess().getRule();
	}
	
	///********************************************************************************************************************
	// *                                               ADAPTATION                                                         *
	// *******************************************************************************************************************/ AnnotatedEffector:
	//	"[" property=AdaptationProperty lowerBound=Expression higherBound=Expression "]" statement=(MoveForward | MoveBackward
	//	| TurnLeft | TurnRight);
	public AnnotatedEffectorElements getAnnotatedEffectorAccess() {
		return pAnnotatedEffector;
	}
	
	public ParserRule getAnnotatedEffectorRule() {
		return getAnnotatedEffectorAccess().getRule();
	}
	
	//terminal DOUBLE returns ecore::EDouble:
	//	INT "." INT;
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	}
	
	//enum BasicType:
	//	STRING="String" | BOOLEAN="bool" | INTEGER="int" | DOUBLE="double" | VOID="void";
	public BasicTypeElements getBasicTypeAccess() {
		return eBasicType;
	}
	
	public EnumRule getBasicTypeRule() {
		return getBasicTypeAccess().getRule();
	}
	
	//enum AdaptationProperty:
	//	SPEED="Speed";
	public AdaptationPropertyElements getAdaptationPropertyAccess() {
		return eAdaptationProperty;
	}
	
	public EnumRule getAdaptationPropertyRule() {
		return getAdaptationPropertyAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
